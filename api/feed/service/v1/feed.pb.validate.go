// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/feed.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Dynamic with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Dynamic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dynamic with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DynamicMultiError, or nil if none found.
func (m *Dynamic) ValidateAll() error {
	return m.validate(true)
}

func (m *Dynamic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DmcId

	// no validation rules for DmcType

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DynamicValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DynamicValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DynamicValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Text

	if len(errors) > 0 {
		return DynamicMultiError(errors)
	}

	return nil
}

// DynamicMultiError is an error wrapping multiple validation errors returned
// by Dynamic.ValidateAll() if the designated constraints aren't met.
type DynamicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DynamicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DynamicMultiError) AllErrors() []error { return m }

// DynamicValidationError is the validation error returned by Dynamic.Validate
// if the designated constraints aren't met.
type DynamicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DynamicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DynamicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DynamicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DynamicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DynamicValidationError) ErrorName() string { return "DynamicValidationError" }

// Error satisfies the builtin error interface
func (e DynamicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDynamic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DynamicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DynamicValidationError{}

// Validate checks the field values on PublishRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublishRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishRequestMultiError,
// or nil if none found.
func (m *PublishRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := PublishRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DmcType

	// no validation rules for Text

	if len(errors) > 0 {
		return PublishRequestMultiError(errors)
	}

	return nil
}

// PublishRequestMultiError is an error wrapping multiple validation errors
// returned by PublishRequest.ValidateAll() if the designated constraints
// aren't met.
type PublishRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishRequestMultiError) AllErrors() []error { return m }

// PublishRequestValidationError is the validation error returned by
// PublishRequest.Validate if the designated constraints aren't met.
type PublishRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishRequestValidationError) ErrorName() string { return "PublishRequestValidationError" }

// Error satisfies the builtin error interface
func (e PublishRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishRequestValidationError{}

// Validate checks the field values on PublishReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublishReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishReplyMultiError, or
// nil if none found.
func (m *PublishReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DmcId

	if len(errors) > 0 {
		return PublishReplyMultiError(errors)
	}

	return nil
}

// PublishReplyMultiError is an error wrapping multiple validation errors
// returned by PublishReply.ValidateAll() if the designated constraints aren't met.
type PublishReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishReplyMultiError) AllErrors() []error { return m }

// PublishReplyValidationError is the validation error returned by
// PublishReply.Validate if the designated constraints aren't met.
type PublishReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishReplyValidationError) ErrorName() string { return "PublishReplyValidationError" }

// Error satisfies the builtin error interface
func (e PublishReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishReplyValidationError{}

// Validate checks the field values on FollowingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FollowingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowingRequestMultiError, or nil if none found.
func (m *FollowingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := FollowingRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLastId() < 0 {
		err := FollowingRequestValidationError{
			field:  "LastId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 20 {
		err := FollowingRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 20]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FollowingRequestMultiError(errors)
	}

	return nil
}

// FollowingRequestMultiError is an error wrapping multiple validation errors
// returned by FollowingRequest.ValidateAll() if the designated constraints
// aren't met.
type FollowingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowingRequestMultiError) AllErrors() []error { return m }

// FollowingRequestValidationError is the validation error returned by
// FollowingRequest.Validate if the designated constraints aren't met.
type FollowingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowingRequestValidationError) ErrorName() string { return "FollowingRequestValidationError" }

// Error satisfies the builtin error interface
func (e FollowingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowingRequestValidationError{}

// Validate checks the field values on FollowingReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FollowingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowingReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FollowingReplyMultiError,
// or nil if none found.
func (m *FollowingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDmcs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FollowingReplyValidationError{
						field:  fmt.Sprintf("Dmcs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FollowingReplyValidationError{
						field:  fmt.Sprintf("Dmcs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FollowingReplyValidationError{
					field:  fmt.Sprintf("Dmcs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FollowingReplyMultiError(errors)
	}

	return nil
}

// FollowingReplyMultiError is an error wrapping multiple validation errors
// returned by FollowingReply.ValidateAll() if the designated constraints
// aren't met.
type FollowingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowingReplyMultiError) AllErrors() []error { return m }

// FollowingReplyValidationError is the validation error returned by
// FollowingReply.Validate if the designated constraints aren't met.
type FollowingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowingReplyValidationError) ErrorName() string { return "FollowingReplyValidationError" }

// Error satisfies the builtin error interface
func (e FollowingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowingReplyValidationError{}

// Validate checks the field values on HistoryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistoryRequestMultiError,
// or nil if none found.
func (m *HistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := HistoryRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLastId() < 0 {
		err := HistoryRequestValidationError{
			field:  "LastId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 20 {
		err := HistoryRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 20]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HistoryRequestMultiError(errors)
	}

	return nil
}

// HistoryRequestMultiError is an error wrapping multiple validation errors
// returned by HistoryRequest.ValidateAll() if the designated constraints
// aren't met.
type HistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryRequestMultiError) AllErrors() []error { return m }

// HistoryRequestValidationError is the validation error returned by
// HistoryRequest.Validate if the designated constraints aren't met.
type HistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryRequestValidationError) ErrorName() string { return "HistoryRequestValidationError" }

// Error satisfies the builtin error interface
func (e HistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryRequestValidationError{}

// Validate checks the field values on HistoryReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistoryReplyMultiError, or
// nil if none found.
func (m *HistoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDmcs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryReplyValidationError{
						field:  fmt.Sprintf("Dmcs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryReplyValidationError{
						field:  fmt.Sprintf("Dmcs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryReplyValidationError{
					field:  fmt.Sprintf("Dmcs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HistoryReplyMultiError(errors)
	}

	return nil
}

// HistoryReplyMultiError is an error wrapping multiple validation errors
// returned by HistoryReply.ValidateAll() if the designated constraints aren't met.
type HistoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryReplyMultiError) AllErrors() []error { return m }

// HistoryReplyValidationError is the validation error returned by
// HistoryReply.Validate if the designated constraints aren't met.
type HistoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryReplyValidationError) ErrorName() string { return "HistoryReplyValidationError" }

// Error satisfies the builtin error interface
func (e HistoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryReplyValidationError{}
