// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: v1/feed.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedSystemClient is the client API for FeedSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedSystemClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishReply, error)
	Following(ctx context.Context, in *FollowingRequest, opts ...grpc.CallOption) (*FollowingReply, error)
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryReply, error)
}

type feedSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedSystemClient(cc grpc.ClientConnInterface) FeedSystemClient {
	return &feedSystemClient{cc}
}

func (c *feedSystemClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishReply, error) {
	out := new(PublishReply)
	err := c.cc.Invoke(ctx, "/feed.v1.FeedSystem/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedSystemClient) Following(ctx context.Context, in *FollowingRequest, opts ...grpc.CallOption) (*FollowingReply, error) {
	out := new(FollowingReply)
	err := c.cc.Invoke(ctx, "/feed.v1.FeedSystem/Following", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedSystemClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryReply, error) {
	out := new(HistoryReply)
	err := c.cc.Invoke(ctx, "/feed.v1.FeedSystem/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedSystemServer is the server API for FeedSystem service.
// All implementations must embed UnimplementedFeedSystemServer
// for forward compatibility
type FeedSystemServer interface {
	Publish(context.Context, *PublishRequest) (*PublishReply, error)
	Following(context.Context, *FollowingRequest) (*FollowingReply, error)
	History(context.Context, *HistoryRequest) (*HistoryReply, error)
	mustEmbedUnimplementedFeedSystemServer()
}

// UnimplementedFeedSystemServer must be embedded to have forward compatible implementations.
type UnimplementedFeedSystemServer struct {
}

func (UnimplementedFeedSystemServer) Publish(context.Context, *PublishRequest) (*PublishReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedFeedSystemServer) Following(context.Context, *FollowingRequest) (*FollowingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Following not implemented")
}
func (UnimplementedFeedSystemServer) History(context.Context, *HistoryRequest) (*HistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedFeedSystemServer) mustEmbedUnimplementedFeedSystemServer() {}

// UnsafeFeedSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedSystemServer will
// result in compilation errors.
type UnsafeFeedSystemServer interface {
	mustEmbedUnimplementedFeedSystemServer()
}

func RegisterFeedSystemServer(s grpc.ServiceRegistrar, srv FeedSystemServer) {
	s.RegisterService(&FeedSystem_ServiceDesc, srv)
}

func _FeedSystem_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedSystemServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.v1.FeedSystem/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedSystemServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedSystem_Following_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedSystemServer).Following(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.v1.FeedSystem/Following",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedSystemServer).Following(ctx, req.(*FollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedSystem_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedSystemServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.v1.FeedSystem/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedSystemServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedSystem_ServiceDesc is the grpc.ServiceDesc for FeedSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.v1.FeedSystem",
	HandlerType: (*FeedSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _FeedSystem_Publish_Handler,
		},
		{
			MethodName: "Following",
			Handler:    _FeedSystem_Following_Handler,
		},
		{
			MethodName: "History",
			Handler:    _FeedSystem_History_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/feed.proto",
}
