// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type FeedSystemHTTPServer interface {
	Following(context.Context, *FollowingRequest) (*FollowingReply, error)
	History(context.Context, *HistoryRequest) (*HistoryReply, error)
	Publish(context.Context, *PublishRequest) (*PublishReply, error)
}

func RegisterFeedSystemHTTPServer(s *http.Server, srv FeedSystemHTTPServer) {
	r := s.Route("/")
	r.POST("/api/feed/v1/publish", _FeedSystem_Publish0_HTTP_Handler(srv))
	r.GET("/api/feed/v1/following", _FeedSystem_Following0_HTTP_Handler(srv))
	r.GET("/api/feed/v1/history", _FeedSystem_History0_HTTP_Handler(srv))
}

func _FeedSystem_Publish0_HTTP_Handler(srv FeedSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PublishRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/feed.v1.FeedSystem/Publish")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Publish(ctx, req.(*PublishRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PublishReply)
		return ctx.Result(200, reply)
	}
}

func _FeedSystem_Following0_HTTP_Handler(srv FeedSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/feed.v1.FeedSystem/Following")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Following(ctx, req.(*FollowingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowingReply)
		return ctx.Result(200, reply)
	}
}

func _FeedSystem_History0_HTTP_Handler(srv FeedSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/feed.v1.FeedSystem/History")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.History(ctx, req.(*HistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HistoryReply)
		return ctx.Result(200, reply)
	}
}

type FeedSystemHTTPClient interface {
	Following(ctx context.Context, req *FollowingRequest, opts ...http.CallOption) (rsp *FollowingReply, err error)
	History(ctx context.Context, req *HistoryRequest, opts ...http.CallOption) (rsp *HistoryReply, err error)
	Publish(ctx context.Context, req *PublishRequest, opts ...http.CallOption) (rsp *PublishReply, err error)
}

type FeedSystemHTTPClientImpl struct {
	cc *http.Client
}

func NewFeedSystemHTTPClient(client *http.Client) FeedSystemHTTPClient {
	return &FeedSystemHTTPClientImpl{client}
}

func (c *FeedSystemHTTPClientImpl) Following(ctx context.Context, in *FollowingRequest, opts ...http.CallOption) (*FollowingReply, error) {
	var out FollowingReply
	pattern := "/api/feed/v1/following"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/feed.v1.FeedSystem/Following"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedSystemHTTPClientImpl) History(ctx context.Context, in *HistoryRequest, opts ...http.CallOption) (*HistoryReply, error) {
	var out HistoryReply
	pattern := "/api/feed/v1/history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/feed.v1.FeedSystem/History"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FeedSystemHTTPClientImpl) Publish(ctx context.Context, in *PublishRequest, opts ...http.CallOption) (*PublishReply, error) {
	var out PublishReply
	pattern := "/api/feed/v1/publish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/feed.v1.FeedSystem/Publish"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
