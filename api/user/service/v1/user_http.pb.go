// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UserSystemHTTPServer interface {
	Followers(context.Context, *FollowersRequest) (*FollowersReply, error)
	Following(context.Context, *FollowingRequest) (*FollowingReply, error)
	Info(context.Context, *InfoRequest) (*InfoReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Relation(context.Context, *RelationRequest) (*RelationReply, error)
}

func RegisterUserSystemHTTPServer(s *http.Server, srv UserSystemHTTPServer) {
	r := s.Route("/")
	r.POST("/api/user/v1/register", _UserSystem_Register0_HTTP_Handler(srv))
	r.GET("/api/user/v1/info", _UserSystem_Info0_HTTP_Handler(srv))
	r.GET("/api/user/v1/followers", _UserSystem_Followers0_HTTP_Handler(srv))
	r.GET("/api/user/v1/following", _UserSystem_Following0_HTTP_Handler(srv))
	r.POST("/api/user/v1/relation", _UserSystem_Relation0_HTTP_Handler(srv))
}

func _UserSystem_Register0_HTTP_Handler(srv UserSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.v1.UserSystem/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _UserSystem_Info0_HTTP_Handler(srv UserSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.v1.UserSystem/Info")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Info(ctx, req.(*InfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InfoReply)
		return ctx.Result(200, reply)
	}
}

func _UserSystem_Followers0_HTTP_Handler(srv UserSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.v1.UserSystem/Followers")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Followers(ctx, req.(*FollowersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowersReply)
		return ctx.Result(200, reply)
	}
}

func _UserSystem_Following0_HTTP_Handler(srv UserSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.v1.UserSystem/Following")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Following(ctx, req.(*FollowingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowingReply)
		return ctx.Result(200, reply)
	}
}

func _UserSystem_Relation0_HTTP_Handler(srv UserSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RelationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.v1.UserSystem/Relation")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Relation(ctx, req.(*RelationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RelationReply)
		return ctx.Result(200, reply)
	}
}

type UserSystemHTTPClient interface {
	Followers(ctx context.Context, req *FollowersRequest, opts ...http.CallOption) (rsp *FollowersReply, err error)
	Following(ctx context.Context, req *FollowingRequest, opts ...http.CallOption) (rsp *FollowingReply, err error)
	Info(ctx context.Context, req *InfoRequest, opts ...http.CallOption) (rsp *InfoReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	Relation(ctx context.Context, req *RelationRequest, opts ...http.CallOption) (rsp *RelationReply, err error)
}

type UserSystemHTTPClientImpl struct {
	cc *http.Client
}

func NewUserSystemHTTPClient(client *http.Client) UserSystemHTTPClient {
	return &UserSystemHTTPClientImpl{client}
}

func (c *UserSystemHTTPClientImpl) Followers(ctx context.Context, in *FollowersRequest, opts ...http.CallOption) (*FollowersReply, error) {
	var out FollowersReply
	pattern := "/api/user/v1/followers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/user.v1.UserSystem/Followers"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserSystemHTTPClientImpl) Following(ctx context.Context, in *FollowingRequest, opts ...http.CallOption) (*FollowingReply, error) {
	var out FollowingReply
	pattern := "/api/user/v1/following"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/user.v1.UserSystem/Following"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserSystemHTTPClientImpl) Info(ctx context.Context, in *InfoRequest, opts ...http.CallOption) (*InfoReply, error) {
	var out InfoReply
	pattern := "/api/user/v1/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/user.v1.UserSystem/Info"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserSystemHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/api/user/v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.v1.UserSystem/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserSystemHTTPClientImpl) Relation(ctx context.Context, in *RelationRequest, opts ...http.CallOption) (*RelationReply, error) {
	var out RelationReply
	pattern := "/api/user/v1/relation"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.v1.UserSystem/Relation"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
