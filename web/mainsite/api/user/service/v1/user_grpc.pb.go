// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSystemClient is the client API for UserSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSystemClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Followers(ctx context.Context, in *FollowersRequest, opts ...grpc.CallOption) (*FollowersReply, error)
	Following(ctx context.Context, in *FollowingRequest, opts ...grpc.CallOption) (*FollowingReply, error)
	Relation(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*RelationReply, error)
}

type userSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSystemClient(cc grpc.ClientConnInterface) UserSystemClient {
	return &userSystemClient{cc}
}

func (c *userSystemClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/user.v1.UserSystem/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSystemClient) Followers(ctx context.Context, in *FollowersRequest, opts ...grpc.CallOption) (*FollowersReply, error) {
	out := new(FollowersReply)
	err := c.cc.Invoke(ctx, "/user.v1.UserSystem/Followers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSystemClient) Following(ctx context.Context, in *FollowingRequest, opts ...grpc.CallOption) (*FollowingReply, error) {
	out := new(FollowingReply)
	err := c.cc.Invoke(ctx, "/user.v1.UserSystem/Following", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSystemClient) Relation(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*RelationReply, error) {
	out := new(RelationReply)
	err := c.cc.Invoke(ctx, "/user.v1.UserSystem/Relation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSystemServer is the server API for UserSystem service.
// All implementations must embed UnimplementedUserSystemServer
// for forward compatibility
type UserSystemServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Followers(context.Context, *FollowersRequest) (*FollowersReply, error)
	Following(context.Context, *FollowingRequest) (*FollowingReply, error)
	Relation(context.Context, *RelationRequest) (*RelationReply, error)
	mustEmbedUnimplementedUserSystemServer()
}

// UnimplementedUserSystemServer must be embedded to have forward compatible implementations.
type UnimplementedUserSystemServer struct {
}

func (UnimplementedUserSystemServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserSystemServer) Followers(context.Context, *FollowersRequest) (*FollowersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Followers not implemented")
}
func (UnimplementedUserSystemServer) Following(context.Context, *FollowingRequest) (*FollowingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Following not implemented")
}
func (UnimplementedUserSystemServer) Relation(context.Context, *RelationRequest) (*RelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relation not implemented")
}
func (UnimplementedUserSystemServer) mustEmbedUnimplementedUserSystemServer() {}

// UnsafeUserSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSystemServer will
// result in compilation errors.
type UnsafeUserSystemServer interface {
	mustEmbedUnimplementedUserSystemServer()
}

func RegisterUserSystemServer(s grpc.ServiceRegistrar, srv UserSystemServer) {
	s.RegisterService(&UserSystem_ServiceDesc, srv)
}

func _UserSystem_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSystemServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserSystem/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSystemServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSystem_Followers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSystemServer).Followers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserSystem/Followers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSystemServer).Followers(ctx, req.(*FollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSystem_Following_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSystemServer).Following(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserSystem/Following",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSystemServer).Following(ctx, req.(*FollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSystem_Relation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSystemServer).Relation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserSystem/Relation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSystemServer).Relation(ctx, req.(*RelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSystem_ServiceDesc is the grpc.ServiceDesc for UserSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserSystem",
	HandlerType: (*UserSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserSystem_Register_Handler,
		},
		{
			MethodName: "Followers",
			Handler:    _UserSystem_Followers_Handler,
		},
		{
			MethodName: "Following",
			Handler:    _UserSystem_Following_Handler,
		},
		{
			MethodName: "Relation",
			Handler:    _UserSystem_Relation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/user.proto",
}
