// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Nick

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetNick()); l < 3 || l > 8 {
		err := RegisterRequestValidationError{
			field:  "Nick",
			reason: "value length must be between 3 and 8 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReplyMultiError, or
// nil if none found.
func (m *RegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterReplyMultiError(errors)
	}

	return nil
}

// RegisterReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReplyMultiError) AllErrors() []error { return m }

// RegisterReplyValidationError is the validation error returned by
// RegisterReply.Validate if the designated constraints aren't met.
type RegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReplyValidationError) ErrorName() string { return "RegisterReplyValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReplyValidationError{}

// Validate checks the field values on FollowersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FollowersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowersRequestMultiError, or nil if none found.
func (m *FollowersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := FollowersRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := FollowersRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetCount(); val <= 0 || val > 50 {
		err := FollowersRequestValidationError{
			field:  "Count",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FollowersRequestMultiError(errors)
	}

	return nil
}

// FollowersRequestMultiError is an error wrapping multiple validation errors
// returned by FollowersRequest.ValidateAll() if the designated constraints
// aren't met.
type FollowersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowersRequestMultiError) AllErrors() []error { return m }

// FollowersRequestValidationError is the validation error returned by
// FollowersRequest.Validate if the designated constraints aren't met.
type FollowersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowersRequestValidationError) ErrorName() string { return "FollowersRequestValidationError" }

// Error satisfies the builtin error interface
func (e FollowersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowersRequestValidationError{}

// Validate checks the field values on FollowersReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FollowersReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowersReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FollowersReplyMultiError,
// or nil if none found.
func (m *FollowersReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowersReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FollowersReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FollowersReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FollowersReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return FollowersReplyMultiError(errors)
	}

	return nil
}

// FollowersReplyMultiError is an error wrapping multiple validation errors
// returned by FollowersReply.ValidateAll() if the designated constraints
// aren't met.
type FollowersReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowersReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowersReplyMultiError) AllErrors() []error { return m }

// FollowersReplyValidationError is the validation error returned by
// FollowersReply.Validate if the designated constraints aren't met.
type FollowersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowersReplyValidationError) ErrorName() string { return "FollowersReplyValidationError" }

// Error satisfies the builtin error interface
func (e FollowersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowersReplyValidationError{}

// Validate checks the field values on FollowingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FollowingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowingRequestMultiError, or nil if none found.
func (m *FollowingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := FollowingRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := FollowingRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetCount(); val <= 0 || val > 50 {
		err := FollowingRequestValidationError{
			field:  "Count",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FollowingRequestMultiError(errors)
	}

	return nil
}

// FollowingRequestMultiError is an error wrapping multiple validation errors
// returned by FollowingRequest.ValidateAll() if the designated constraints
// aren't met.
type FollowingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowingRequestMultiError) AllErrors() []error { return m }

// FollowingRequestValidationError is the validation error returned by
// FollowingRequest.Validate if the designated constraints aren't met.
type FollowingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowingRequestValidationError) ErrorName() string { return "FollowingRequestValidationError" }

// Error satisfies the builtin error interface
func (e FollowingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowingRequestValidationError{}

// Validate checks the field values on FollowingReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FollowingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowingReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FollowingReplyMultiError,
// or nil if none found.
func (m *FollowingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FollowingReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FollowingReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FollowingReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return FollowingReplyMultiError(errors)
	}

	return nil
}

// FollowingReplyMultiError is an error wrapping multiple validation errors
// returned by FollowingReply.ValidateAll() if the designated constraints
// aren't met.
type FollowingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowingReplyMultiError) AllErrors() []error { return m }

// FollowingReplyValidationError is the validation error returned by
// FollowingReply.Validate if the designated constraints aren't met.
type FollowingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowingReplyValidationError) ErrorName() string { return "FollowingReplyValidationError" }

// Error satisfies the builtin error interface
func (e FollowingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowingReplyValidationError{}

// Validate checks the field values on RelationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationRequestMultiError, or nil if none found.
func (m *RelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetActiveUid() <= 0 {
		err := RelationRequestValidationError{
			field:  "ActiveUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPassiveUid() <= 0 {
		err := RelationRequestValidationError{
			field:  "PassiveUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Action

	if len(errors) > 0 {
		return RelationRequestMultiError(errors)
	}

	return nil
}

// RelationRequestMultiError is an error wrapping multiple validation errors
// returned by RelationRequest.ValidateAll() if the designated constraints
// aren't met.
type RelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationRequestMultiError) AllErrors() []error { return m }

// RelationRequestValidationError is the validation error returned by
// RelationRequest.Validate if the designated constraints aren't met.
type RelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationRequestValidationError) ErrorName() string { return "RelationRequestValidationError" }

// Error satisfies the builtin error interface
func (e RelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationRequestValidationError{}

// Validate checks the field values on RelationReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RelationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelationReplyMultiError, or
// nil if none found.
func (m *RelationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RelationReplyMultiError(errors)
	}

	return nil
}

// RelationReplyMultiError is an error wrapping multiple validation errors
// returned by RelationReply.ValidateAll() if the designated constraints
// aren't met.
type RelationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationReplyMultiError) AllErrors() []error { return m }

// RelationReplyValidationError is the validation error returned by
// RelationReply.Validate if the designated constraints aren't met.
type RelationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationReplyValidationError) ErrorName() string { return "RelationReplyValidationError" }

// Error satisfies the builtin error interface
func (e RelationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationReplyValidationError{}
