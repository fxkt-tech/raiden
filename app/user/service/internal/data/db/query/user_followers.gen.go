// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"fxkt.tech/raiden/app/user/service/internal/data/db/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newUserFollower(db *gorm.DB) userFollower {
	_userFollower := userFollower{}

	_userFollower.userFollowerDo.UseDB(db)
	_userFollower.userFollowerDo.UseModel(&model.UserFollower{})

	tableName := _userFollower.userFollowerDo.TableName()
	_userFollower.ALL = field.NewField(tableName, "*")
	_userFollower.UID = field.NewInt32(tableName, "uid")
	_userFollower.FollowersUID = field.NewInt32(tableName, "followers_uid")
	_userFollower.Status = field.NewInt32(tableName, "status")
	_userFollower.ActionTime = field.NewTime(tableName, "action_time")

	_userFollower.fillFieldMap()

	return _userFollower
}

type userFollower struct {
	userFollowerDo userFollowerDo

	ALL          field.Field
	UID          field.Int32
	FollowersUID field.Int32
	Status       field.Int32
	ActionTime   field.Time

	fieldMap map[string]field.Expr
}

func (u userFollower) Table(newTableName string) *userFollower {
	u.userFollowerDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFollower) As(alias string) *userFollower {
	u.userFollowerDo.DO = *(u.userFollowerDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFollower) updateTableName(table string) *userFollower {
	u.ALL = field.NewField(table, "*")
	u.UID = field.NewInt32(table, "uid")
	u.FollowersUID = field.NewInt32(table, "followers_uid")
	u.Status = field.NewInt32(table, "status")
	u.ActionTime = field.NewTime(table, "action_time")

	u.fillFieldMap()

	return u
}

func (u *userFollower) WithContext(ctx context.Context) *userFollowerDo {
	return u.userFollowerDo.WithContext(ctx)
}

func (u userFollower) TableName() string { return u.userFollowerDo.TableName() }

func (u *userFollower) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFollower) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["uid"] = u.UID
	u.fieldMap["followers_uid"] = u.FollowersUID
	u.fieldMap["status"] = u.Status
	u.fieldMap["action_time"] = u.ActionTime
}

func (u userFollower) clone(db *gorm.DB) userFollower {
	u.userFollowerDo.ReplaceDB(db)
	return u
}

type userFollowerDo struct{ gen.DO }

func (u userFollowerDo) Debug() *userFollowerDo {
	return u.withDO(u.DO.Debug())
}

func (u userFollowerDo) WithContext(ctx context.Context) *userFollowerDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFollowerDo) Clauses(conds ...clause.Expression) *userFollowerDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFollowerDo) Returning(value interface{}, columns ...string) *userFollowerDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFollowerDo) Not(conds ...gen.Condition) *userFollowerDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFollowerDo) Or(conds ...gen.Condition) *userFollowerDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFollowerDo) Select(conds ...field.Expr) *userFollowerDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFollowerDo) Where(conds ...gen.Condition) *userFollowerDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFollowerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userFollowerDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userFollowerDo) Order(conds ...field.Expr) *userFollowerDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFollowerDo) Distinct(cols ...field.Expr) *userFollowerDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFollowerDo) Omit(cols ...field.Expr) *userFollowerDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFollowerDo) Join(table schema.Tabler, on ...field.Expr) *userFollowerDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFollowerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userFollowerDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFollowerDo) RightJoin(table schema.Tabler, on ...field.Expr) *userFollowerDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFollowerDo) Group(cols ...field.Expr) *userFollowerDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFollowerDo) Having(conds ...gen.Condition) *userFollowerDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFollowerDo) Limit(limit int) *userFollowerDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFollowerDo) Offset(offset int) *userFollowerDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFollowerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userFollowerDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFollowerDo) Unscoped() *userFollowerDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFollowerDo) Create(values ...*model.UserFollower) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFollowerDo) CreateInBatches(values []*model.UserFollower, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFollowerDo) Save(values ...*model.UserFollower) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFollowerDo) First() (*model.UserFollower, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) Take() (*model.UserFollower, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) Last() (*model.UserFollower, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) Find() ([]*model.UserFollower, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFollower), err
}

func (u userFollowerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFollower, err error) {
	buf := make([]*model.UserFollower, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFollowerDo) FindInBatches(result *[]*model.UserFollower, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFollowerDo) Attrs(attrs ...field.AssignExpr) *userFollowerDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFollowerDo) Assign(attrs ...field.AssignExpr) *userFollowerDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFollowerDo) Joins(field field.RelationField) *userFollowerDo {
	return u.withDO(u.DO.Joins(field))
}

func (u userFollowerDo) Preload(field field.RelationField) *userFollowerDo {
	return u.withDO(u.DO.Preload(field))
}

func (u userFollowerDo) FirstOrInit() (*model.UserFollower, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) FirstOrCreate() (*model.UserFollower, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFollower), nil
	}
}

func (u userFollowerDo) FindByPage(offset int, limit int) (result []*model.UserFollower, count int64, err error) {
	if limit <= 0 {
		count, err = u.Count()
		return
	}

	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFollowerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u *userFollowerDo) withDO(do gen.Dao) *userFollowerDo {
	u.DO = *do.(*gen.DO)
	return u
}
