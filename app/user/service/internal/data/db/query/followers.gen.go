// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"fxkt.tech/raiden/app/user/service/internal/data/db/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newFollower(db *gorm.DB) follower {
	_follower := follower{}

	_follower.followerDo.UseDB(db)
	_follower.followerDo.UseModel(&model.Follower{})

	tableName := _follower.followerDo.TableName()
	_follower.ALL = field.NewField(tableName, "*")
	_follower.UID = field.NewInt32(tableName, "uid")
	_follower.FollowersUID = field.NewInt32(tableName, "followers_uid")
	_follower.Status = field.NewInt32(tableName, "status")
	_follower.ActionTime = field.NewTime(tableName, "action_time")

	_follower.fillFieldMap()

	return _follower
}

type follower struct {
	followerDo followerDo

	ALL          field.Field
	UID          field.Int32
	FollowersUID field.Int32
	Status       field.Int32
	ActionTime   field.Time

	fieldMap map[string]field.Expr
}

func (f follower) Table(newTableName string) *follower {
	f.followerDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f follower) As(alias string) *follower {
	f.followerDo.DO = *(f.followerDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *follower) updateTableName(table string) *follower {
	f.ALL = field.NewField(table, "*")
	f.UID = field.NewInt32(table, "uid")
	f.FollowersUID = field.NewInt32(table, "followers_uid")
	f.Status = field.NewInt32(table, "status")
	f.ActionTime = field.NewTime(table, "action_time")

	f.fillFieldMap()

	return f
}

func (f *follower) WithContext(ctx context.Context) *followerDo { return f.followerDo.WithContext(ctx) }

func (f follower) TableName() string { return f.followerDo.TableName() }

func (f *follower) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *follower) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["followers_uid"] = f.FollowersUID
	f.fieldMap["status"] = f.Status
	f.fieldMap["action_time"] = f.ActionTime
}

func (f follower) clone(db *gorm.DB) follower {
	f.followerDo.ReplaceDB(db)
	return f
}

type followerDo struct{ gen.DO }

func (f followerDo) Debug() *followerDo {
	return f.withDO(f.DO.Debug())
}

func (f followerDo) WithContext(ctx context.Context) *followerDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f followerDo) Clauses(conds ...clause.Expression) *followerDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f followerDo) Returning(value interface{}, columns ...string) *followerDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f followerDo) Not(conds ...gen.Condition) *followerDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f followerDo) Or(conds ...gen.Condition) *followerDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f followerDo) Select(conds ...field.Expr) *followerDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f followerDo) Where(conds ...gen.Condition) *followerDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f followerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *followerDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f followerDo) Order(conds ...field.Expr) *followerDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f followerDo) Distinct(cols ...field.Expr) *followerDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f followerDo) Omit(cols ...field.Expr) *followerDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f followerDo) Join(table schema.Tabler, on ...field.Expr) *followerDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f followerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *followerDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f followerDo) RightJoin(table schema.Tabler, on ...field.Expr) *followerDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f followerDo) Group(cols ...field.Expr) *followerDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f followerDo) Having(conds ...gen.Condition) *followerDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f followerDo) Limit(limit int) *followerDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f followerDo) Offset(offset int) *followerDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f followerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *followerDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f followerDo) Unscoped() *followerDo {
	return f.withDO(f.DO.Unscoped())
}

func (f followerDo) Create(values ...*model.Follower) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f followerDo) CreateInBatches(values []*model.Follower, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f followerDo) Save(values ...*model.Follower) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f followerDo) First() (*model.Follower, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Follower), nil
	}
}

func (f followerDo) Take() (*model.Follower, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Follower), nil
	}
}

func (f followerDo) Last() (*model.Follower, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Follower), nil
	}
}

func (f followerDo) Find() ([]*model.Follower, error) {
	result, err := f.DO.Find()
	return result.([]*model.Follower), err
}

func (f followerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Follower, err error) {
	buf := make([]*model.Follower, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f followerDo) FindInBatches(result *[]*model.Follower, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f followerDo) Attrs(attrs ...field.AssignExpr) *followerDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f followerDo) Assign(attrs ...field.AssignExpr) *followerDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f followerDo) Joins(field field.RelationField) *followerDo {
	return f.withDO(f.DO.Joins(field))
}

func (f followerDo) Preload(field field.RelationField) *followerDo {
	return f.withDO(f.DO.Preload(field))
}

func (f followerDo) FirstOrInit() (*model.Follower, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Follower), nil
	}
}

func (f followerDo) FirstOrCreate() (*model.Follower, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Follower), nil
	}
}

func (f followerDo) FindByPage(offset int, limit int) (result []*model.Follower, count int64, err error) {
	if limit <= 0 {
		count, err = f.Count()
		return
	}

	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f followerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f *followerDo) withDO(do gen.Dao) *followerDo {
	f.DO = *do.(*gen.DO)
	return f
}
