// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"fxkt.tech/raiden/app/user/service/internal/data/db/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newFollowing(db *gorm.DB) following {
	_following := following{}

	_following.followingDo.UseDB(db)
	_following.followingDo.UseModel(&model.Following{})

	tableName := _following.followingDo.TableName()
	_following.ALL = field.NewField(tableName, "*")
	_following.UID = field.NewInt32(tableName, "uid")
	_following.FollowingUID = field.NewInt32(tableName, "following_uid")
	_following.Status = field.NewInt32(tableName, "status")
	_following.ActionTime = field.NewTime(tableName, "action_time")

	_following.fillFieldMap()

	return _following
}

type following struct {
	followingDo followingDo

	ALL          field.Field
	UID          field.Int32
	FollowingUID field.Int32
	Status       field.Int32
	ActionTime   field.Time

	fieldMap map[string]field.Expr
}

func (f following) Table(newTableName string) *following {
	f.followingDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f following) As(alias string) *following {
	f.followingDo.DO = *(f.followingDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *following) updateTableName(table string) *following {
	f.ALL = field.NewField(table, "*")
	f.UID = field.NewInt32(table, "uid")
	f.FollowingUID = field.NewInt32(table, "following_uid")
	f.Status = field.NewInt32(table, "status")
	f.ActionTime = field.NewTime(table, "action_time")

	f.fillFieldMap()

	return f
}

func (f *following) WithContext(ctx context.Context) *followingDo {
	return f.followingDo.WithContext(ctx)
}

func (f following) TableName() string { return f.followingDo.TableName() }

func (f *following) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *following) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["uid"] = f.UID
	f.fieldMap["following_uid"] = f.FollowingUID
	f.fieldMap["status"] = f.Status
	f.fieldMap["action_time"] = f.ActionTime
}

func (f following) clone(db *gorm.DB) following {
	f.followingDo.ReplaceDB(db)
	return f
}

type followingDo struct{ gen.DO }

func (f followingDo) Debug() *followingDo {
	return f.withDO(f.DO.Debug())
}

func (f followingDo) WithContext(ctx context.Context) *followingDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f followingDo) Clauses(conds ...clause.Expression) *followingDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f followingDo) Returning(value interface{}, columns ...string) *followingDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f followingDo) Not(conds ...gen.Condition) *followingDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f followingDo) Or(conds ...gen.Condition) *followingDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f followingDo) Select(conds ...field.Expr) *followingDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f followingDo) Where(conds ...gen.Condition) *followingDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f followingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *followingDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f followingDo) Order(conds ...field.Expr) *followingDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f followingDo) Distinct(cols ...field.Expr) *followingDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f followingDo) Omit(cols ...field.Expr) *followingDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f followingDo) Join(table schema.Tabler, on ...field.Expr) *followingDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f followingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *followingDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f followingDo) RightJoin(table schema.Tabler, on ...field.Expr) *followingDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f followingDo) Group(cols ...field.Expr) *followingDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f followingDo) Having(conds ...gen.Condition) *followingDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f followingDo) Limit(limit int) *followingDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f followingDo) Offset(offset int) *followingDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f followingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *followingDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f followingDo) Unscoped() *followingDo {
	return f.withDO(f.DO.Unscoped())
}

func (f followingDo) Create(values ...*model.Following) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f followingDo) CreateInBatches(values []*model.Following, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f followingDo) Save(values ...*model.Following) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f followingDo) First() (*model.Following, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Following), nil
	}
}

func (f followingDo) Take() (*model.Following, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Following), nil
	}
}

func (f followingDo) Last() (*model.Following, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Following), nil
	}
}

func (f followingDo) Find() ([]*model.Following, error) {
	result, err := f.DO.Find()
	return result.([]*model.Following), err
}

func (f followingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Following, err error) {
	buf := make([]*model.Following, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f followingDo) FindInBatches(result *[]*model.Following, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f followingDo) Attrs(attrs ...field.AssignExpr) *followingDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f followingDo) Assign(attrs ...field.AssignExpr) *followingDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f followingDo) Joins(field field.RelationField) *followingDo {
	return f.withDO(f.DO.Joins(field))
}

func (f followingDo) Preload(field field.RelationField) *followingDo {
	return f.withDO(f.DO.Preload(field))
}

func (f followingDo) FirstOrInit() (*model.Following, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Following), nil
	}
}

func (f followingDo) FirstOrCreate() (*model.Following, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Following), nil
	}
}

func (f followingDo) FindByPage(offset int, limit int) (result []*model.Following, count int64, err error) {
	if limit <= 0 {
		count, err = f.Count()
		return
	}

	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f followingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f *followingDo) withDO(do gen.Dao) *followingDo {
	f.DO = *do.(*gen.DO)
	return f
}
