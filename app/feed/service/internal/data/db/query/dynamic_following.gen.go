// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"fxkt.tech/raiden/app/feed/service/internal/data/db/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newDynamicFollowing(db *gorm.DB) dynamicFollowing {
	_dynamicFollowing := dynamicFollowing{}

	_dynamicFollowing.dynamicFollowingDo.UseDB(db)
	_dynamicFollowing.dynamicFollowingDo.UseModel(&model.DynamicFollowing{})

	tableName := _dynamicFollowing.dynamicFollowingDo.TableName()
	_dynamicFollowing.ALL = field.NewField(tableName, "*")
	_dynamicFollowing.ID = field.NewInt64(tableName, "id")
	_dynamicFollowing.DmcID = field.NewInt64(tableName, "dmc_id")
	_dynamicFollowing.DmcType = field.NewInt32(tableName, "dmc_type")
	_dynamicFollowing.ByUID = field.NewInt32(tableName, "by_uid")
	_dynamicFollowing.ForUID = field.NewInt32(tableName, "for_uid")
	_dynamicFollowing.Txt = field.NewString(tableName, "txt")
	_dynamicFollowing.Imgs = field.NewString(tableName, "imgs")
	_dynamicFollowing.Status = field.NewInt32(tableName, "status")
	_dynamicFollowing.PublishTime = field.NewTime(tableName, "publish_time")

	_dynamicFollowing.fillFieldMap()

	return _dynamicFollowing
}

type dynamicFollowing struct {
	dynamicFollowingDo dynamicFollowingDo

	ALL         field.Field
	ID          field.Int64
	DmcID       field.Int64
	DmcType     field.Int32
	ByUID       field.Int32
	ForUID      field.Int32
	Txt         field.String
	Imgs        field.String
	Status      field.Int32
	PublishTime field.Time

	fieldMap map[string]field.Expr
}

func (d dynamicFollowing) Table(newTableName string) *dynamicFollowing {
	d.dynamicFollowingDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dynamicFollowing) As(alias string) *dynamicFollowing {
	d.dynamicFollowingDo.DO = *(d.dynamicFollowingDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dynamicFollowing) updateTableName(table string) *dynamicFollowing {
	d.ALL = field.NewField(table, "*")
	d.ID = field.NewInt64(table, "id")
	d.DmcID = field.NewInt64(table, "dmc_id")
	d.DmcType = field.NewInt32(table, "dmc_type")
	d.ByUID = field.NewInt32(table, "by_uid")
	d.ForUID = field.NewInt32(table, "for_uid")
	d.Txt = field.NewString(table, "txt")
	d.Imgs = field.NewString(table, "imgs")
	d.Status = field.NewInt32(table, "status")
	d.PublishTime = field.NewTime(table, "publish_time")

	d.fillFieldMap()

	return d
}

func (d *dynamicFollowing) WithContext(ctx context.Context) *dynamicFollowingDo {
	return d.dynamicFollowingDo.WithContext(ctx)
}

func (d dynamicFollowing) TableName() string { return d.dynamicFollowingDo.TableName() }

func (d *dynamicFollowing) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dynamicFollowing) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["dmc_id"] = d.DmcID
	d.fieldMap["dmc_type"] = d.DmcType
	d.fieldMap["by_uid"] = d.ByUID
	d.fieldMap["for_uid"] = d.ForUID
	d.fieldMap["txt"] = d.Txt
	d.fieldMap["imgs"] = d.Imgs
	d.fieldMap["status"] = d.Status
	d.fieldMap["publish_time"] = d.PublishTime
}

func (d dynamicFollowing) clone(db *gorm.DB) dynamicFollowing {
	d.dynamicFollowingDo.ReplaceDB(db)
	return d
}

type dynamicFollowingDo struct{ gen.DO }

func (d dynamicFollowingDo) Debug() *dynamicFollowingDo {
	return d.withDO(d.DO.Debug())
}

func (d dynamicFollowingDo) WithContext(ctx context.Context) *dynamicFollowingDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dynamicFollowingDo) Clauses(conds ...clause.Expression) *dynamicFollowingDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dynamicFollowingDo) Returning(value interface{}, columns ...string) *dynamicFollowingDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dynamicFollowingDo) Not(conds ...gen.Condition) *dynamicFollowingDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dynamicFollowingDo) Or(conds ...gen.Condition) *dynamicFollowingDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dynamicFollowingDo) Select(conds ...field.Expr) *dynamicFollowingDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dynamicFollowingDo) Where(conds ...gen.Condition) *dynamicFollowingDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dynamicFollowingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *dynamicFollowingDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dynamicFollowingDo) Order(conds ...field.Expr) *dynamicFollowingDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dynamicFollowingDo) Distinct(cols ...field.Expr) *dynamicFollowingDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dynamicFollowingDo) Omit(cols ...field.Expr) *dynamicFollowingDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dynamicFollowingDo) Join(table schema.Tabler, on ...field.Expr) *dynamicFollowingDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dynamicFollowingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dynamicFollowingDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dynamicFollowingDo) RightJoin(table schema.Tabler, on ...field.Expr) *dynamicFollowingDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dynamicFollowingDo) Group(cols ...field.Expr) *dynamicFollowingDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dynamicFollowingDo) Having(conds ...gen.Condition) *dynamicFollowingDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dynamicFollowingDo) Limit(limit int) *dynamicFollowingDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dynamicFollowingDo) Offset(offset int) *dynamicFollowingDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dynamicFollowingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dynamicFollowingDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dynamicFollowingDo) Unscoped() *dynamicFollowingDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dynamicFollowingDo) Create(values ...*model.DynamicFollowing) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dynamicFollowingDo) CreateInBatches(values []*model.DynamicFollowing, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dynamicFollowingDo) Save(values ...*model.DynamicFollowing) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dynamicFollowingDo) First() (*model.DynamicFollowing, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFollowing), nil
	}
}

func (d dynamicFollowingDo) Take() (*model.DynamicFollowing, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFollowing), nil
	}
}

func (d dynamicFollowingDo) Last() (*model.DynamicFollowing, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFollowing), nil
	}
}

func (d dynamicFollowingDo) Find() ([]*model.DynamicFollowing, error) {
	result, err := d.DO.Find()
	return result.([]*model.DynamicFollowing), err
}

func (d dynamicFollowingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DynamicFollowing, err error) {
	buf := make([]*model.DynamicFollowing, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dynamicFollowingDo) FindInBatches(result *[]*model.DynamicFollowing, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dynamicFollowingDo) Attrs(attrs ...field.AssignExpr) *dynamicFollowingDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dynamicFollowingDo) Assign(attrs ...field.AssignExpr) *dynamicFollowingDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dynamicFollowingDo) Joins(field field.RelationField) *dynamicFollowingDo {
	return d.withDO(d.DO.Joins(field))
}

func (d dynamicFollowingDo) Preload(field field.RelationField) *dynamicFollowingDo {
	return d.withDO(d.DO.Preload(field))
}

func (d dynamicFollowingDo) FirstOrInit() (*model.DynamicFollowing, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFollowing), nil
	}
}

func (d dynamicFollowingDo) FirstOrCreate() (*model.DynamicFollowing, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DynamicFollowing), nil
	}
}

func (d dynamicFollowingDo) FindByPage(offset int, limit int) (result []*model.DynamicFollowing, count int64, err error) {
	if limit <= 0 {
		count, err = d.Count()
		return
	}

	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dynamicFollowingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d *dynamicFollowingDo) withDO(do gen.Dao) *dynamicFollowingDo {
	d.DO = *do.(*gen.DO)
	return d
}
