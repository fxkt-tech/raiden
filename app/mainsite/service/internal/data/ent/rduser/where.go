// Code generated by ent, DO NOT EDIT.

package rduser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldLTE(FieldID, id))
}

// Nick applies equality check predicate on the "nick" field. It's identical to NickEQ.
func Nick(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldEQ(FieldNick, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldEQ(FieldStatus, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.RdUser {
	return predicate.RdUser(sql.FieldEQ(FieldCreateTime, v))
}

// NickEQ applies the EQ predicate on the "nick" field.
func NickEQ(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldEQ(FieldNick, v))
}

// NickNEQ applies the NEQ predicate on the "nick" field.
func NickNEQ(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldNEQ(FieldNick, v))
}

// NickIn applies the In predicate on the "nick" field.
func NickIn(vs ...string) predicate.RdUser {
	return predicate.RdUser(sql.FieldIn(FieldNick, vs...))
}

// NickNotIn applies the NotIn predicate on the "nick" field.
func NickNotIn(vs ...string) predicate.RdUser {
	return predicate.RdUser(sql.FieldNotIn(FieldNick, vs...))
}

// NickGT applies the GT predicate on the "nick" field.
func NickGT(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldGT(FieldNick, v))
}

// NickGTE applies the GTE predicate on the "nick" field.
func NickGTE(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldGTE(FieldNick, v))
}

// NickLT applies the LT predicate on the "nick" field.
func NickLT(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldLT(FieldNick, v))
}

// NickLTE applies the LTE predicate on the "nick" field.
func NickLTE(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldLTE(FieldNick, v))
}

// NickContains applies the Contains predicate on the "nick" field.
func NickContains(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldContains(FieldNick, v))
}

// NickHasPrefix applies the HasPrefix predicate on the "nick" field.
func NickHasPrefix(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldHasPrefix(FieldNick, v))
}

// NickHasSuffix applies the HasSuffix predicate on the "nick" field.
func NickHasSuffix(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldHasSuffix(FieldNick, v))
}

// NickEqualFold applies the EqualFold predicate on the "nick" field.
func NickEqualFold(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldEqualFold(FieldNick, v))
}

// NickContainsFold applies the ContainsFold predicate on the "nick" field.
func NickContainsFold(v string) predicate.RdUser {
	return predicate.RdUser(sql.FieldContainsFold(FieldNick, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.RdUser {
	return predicate.RdUser(sql.FieldLTE(FieldStatus, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.RdUser {
	return predicate.RdUser(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.RdUser {
	return predicate.RdUser(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.RdUser {
	return predicate.RdUser(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.RdUser {
	return predicate.RdUser(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.RdUser {
	return predicate.RdUser(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.RdUser {
	return predicate.RdUser(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.RdUser {
	return predicate.RdUser(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.RdUser {
	return predicate.RdUser(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RdUser) predicate.RdUser {
	return predicate.RdUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RdUser) predicate.RdUser {
	return predicate.RdUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RdUser) predicate.RdUser {
	return predicate.RdUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
