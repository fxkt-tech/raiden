// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/migrate"

	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdmessage"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdmoment"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdrmomentsfollowing"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdruserfollowers"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdruserfollowing"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rduser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// RdMessage is the client for interacting with the RdMessage builders.
	RdMessage *RdMessageClient
	// RdMoment is the client for interacting with the RdMoment builders.
	RdMoment *RdMomentClient
	// RdRMomentsFollowing is the client for interacting with the RdRMomentsFollowing builders.
	RdRMomentsFollowing *RdRMomentsFollowingClient
	// RdRUserFollowers is the client for interacting with the RdRUserFollowers builders.
	RdRUserFollowers *RdRUserFollowersClient
	// RdRUserFollowing is the client for interacting with the RdRUserFollowing builders.
	RdRUserFollowing *RdRUserFollowingClient
	// RdUser is the client for interacting with the RdUser builders.
	RdUser *RdUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.RdMessage = NewRdMessageClient(c.config)
	c.RdMoment = NewRdMomentClient(c.config)
	c.RdRMomentsFollowing = NewRdRMomentsFollowingClient(c.config)
	c.RdRUserFollowers = NewRdRUserFollowersClient(c.config)
	c.RdRUserFollowing = NewRdRUserFollowingClient(c.config)
	c.RdUser = NewRdUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		RdMessage:           NewRdMessageClient(cfg),
		RdMoment:            NewRdMomentClient(cfg),
		RdRMomentsFollowing: NewRdRMomentsFollowingClient(cfg),
		RdRUserFollowers:    NewRdRUserFollowersClient(cfg),
		RdRUserFollowing:    NewRdRUserFollowingClient(cfg),
		RdUser:              NewRdUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		RdMessage:           NewRdMessageClient(cfg),
		RdMoment:            NewRdMomentClient(cfg),
		RdRMomentsFollowing: NewRdRMomentsFollowingClient(cfg),
		RdRUserFollowers:    NewRdRUserFollowersClient(cfg),
		RdRUserFollowing:    NewRdRUserFollowingClient(cfg),
		RdUser:              NewRdUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		RdMessage.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.RdMessage.Use(hooks...)
	c.RdMoment.Use(hooks...)
	c.RdRMomentsFollowing.Use(hooks...)
	c.RdRUserFollowers.Use(hooks...)
	c.RdRUserFollowing.Use(hooks...)
	c.RdUser.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.RdMessage.Intercept(interceptors...)
	c.RdMoment.Intercept(interceptors...)
	c.RdRMomentsFollowing.Intercept(interceptors...)
	c.RdRUserFollowers.Intercept(interceptors...)
	c.RdRUserFollowing.Intercept(interceptors...)
	c.RdUser.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *RdMessageMutation:
		return c.RdMessage.mutate(ctx, m)
	case *RdMomentMutation:
		return c.RdMoment.mutate(ctx, m)
	case *RdRMomentsFollowingMutation:
		return c.RdRMomentsFollowing.mutate(ctx, m)
	case *RdRUserFollowersMutation:
		return c.RdRUserFollowers.mutate(ctx, m)
	case *RdRUserFollowingMutation:
		return c.RdRUserFollowing.mutate(ctx, m)
	case *RdUserMutation:
		return c.RdUser.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// RdMessageClient is a client for the RdMessage schema.
type RdMessageClient struct {
	config
}

// NewRdMessageClient returns a client for the RdMessage from the given config.
func NewRdMessageClient(c config) *RdMessageClient {
	return &RdMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rdmessage.Hooks(f(g(h())))`.
func (c *RdMessageClient) Use(hooks ...Hook) {
	c.hooks.RdMessage = append(c.hooks.RdMessage, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rdmessage.Intercept(f(g(h())))`.
func (c *RdMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.RdMessage = append(c.inters.RdMessage, interceptors...)
}

// Create returns a builder for creating a RdMessage entity.
func (c *RdMessageClient) Create() *RdMessageCreate {
	mutation := newRdMessageMutation(c.config, OpCreate)
	return &RdMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RdMessage entities.
func (c *RdMessageClient) CreateBulk(builders ...*RdMessageCreate) *RdMessageCreateBulk {
	return &RdMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RdMessage.
func (c *RdMessageClient) Update() *RdMessageUpdate {
	mutation := newRdMessageMutation(c.config, OpUpdate)
	return &RdMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RdMessageClient) UpdateOne(rm *RdMessage) *RdMessageUpdateOne {
	mutation := newRdMessageMutation(c.config, OpUpdateOne, withRdMessage(rm))
	return &RdMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RdMessageClient) UpdateOneID(id int32) *RdMessageUpdateOne {
	mutation := newRdMessageMutation(c.config, OpUpdateOne, withRdMessageID(id))
	return &RdMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RdMessage.
func (c *RdMessageClient) Delete() *RdMessageDelete {
	mutation := newRdMessageMutation(c.config, OpDelete)
	return &RdMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RdMessageClient) DeleteOne(rm *RdMessage) *RdMessageDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RdMessageClient) DeleteOneID(id int32) *RdMessageDeleteOne {
	builder := c.Delete().Where(rdmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RdMessageDeleteOne{builder}
}

// Query returns a query builder for RdMessage.
func (c *RdMessageClient) Query() *RdMessageQuery {
	return &RdMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRdMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a RdMessage entity by its id.
func (c *RdMessageClient) Get(ctx context.Context, id int32) (*RdMessage, error) {
	return c.Query().Where(rdmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RdMessageClient) GetX(ctx context.Context, id int32) *RdMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RdMessageClient) Hooks() []Hook {
	return c.hooks.RdMessage
}

// Interceptors returns the client interceptors.
func (c *RdMessageClient) Interceptors() []Interceptor {
	return c.inters.RdMessage
}

func (c *RdMessageClient) mutate(ctx context.Context, m *RdMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RdMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RdMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RdMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RdMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RdMessage mutation op: %q", m.Op())
	}
}

// RdMomentClient is a client for the RdMoment schema.
type RdMomentClient struct {
	config
}

// NewRdMomentClient returns a client for the RdMoment from the given config.
func NewRdMomentClient(c config) *RdMomentClient {
	return &RdMomentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rdmoment.Hooks(f(g(h())))`.
func (c *RdMomentClient) Use(hooks ...Hook) {
	c.hooks.RdMoment = append(c.hooks.RdMoment, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rdmoment.Intercept(f(g(h())))`.
func (c *RdMomentClient) Intercept(interceptors ...Interceptor) {
	c.inters.RdMoment = append(c.inters.RdMoment, interceptors...)
}

// Create returns a builder for creating a RdMoment entity.
func (c *RdMomentClient) Create() *RdMomentCreate {
	mutation := newRdMomentMutation(c.config, OpCreate)
	return &RdMomentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RdMoment entities.
func (c *RdMomentClient) CreateBulk(builders ...*RdMomentCreate) *RdMomentCreateBulk {
	return &RdMomentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RdMoment.
func (c *RdMomentClient) Update() *RdMomentUpdate {
	mutation := newRdMomentMutation(c.config, OpUpdate)
	return &RdMomentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RdMomentClient) UpdateOne(rm *RdMoment) *RdMomentUpdateOne {
	mutation := newRdMomentMutation(c.config, OpUpdateOne, withRdMoment(rm))
	return &RdMomentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RdMomentClient) UpdateOneID(id int64) *RdMomentUpdateOne {
	mutation := newRdMomentMutation(c.config, OpUpdateOne, withRdMomentID(id))
	return &RdMomentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RdMoment.
func (c *RdMomentClient) Delete() *RdMomentDelete {
	mutation := newRdMomentMutation(c.config, OpDelete)
	return &RdMomentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RdMomentClient) DeleteOne(rm *RdMoment) *RdMomentDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RdMomentClient) DeleteOneID(id int64) *RdMomentDeleteOne {
	builder := c.Delete().Where(rdmoment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RdMomentDeleteOne{builder}
}

// Query returns a query builder for RdMoment.
func (c *RdMomentClient) Query() *RdMomentQuery {
	return &RdMomentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRdMoment},
		inters: c.Interceptors(),
	}
}

// Get returns a RdMoment entity by its id.
func (c *RdMomentClient) Get(ctx context.Context, id int64) (*RdMoment, error) {
	return c.Query().Where(rdmoment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RdMomentClient) GetX(ctx context.Context, id int64) *RdMoment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RdMomentClient) Hooks() []Hook {
	return c.hooks.RdMoment
}

// Interceptors returns the client interceptors.
func (c *RdMomentClient) Interceptors() []Interceptor {
	return c.inters.RdMoment
}

func (c *RdMomentClient) mutate(ctx context.Context, m *RdMomentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RdMomentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RdMomentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RdMomentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RdMomentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RdMoment mutation op: %q", m.Op())
	}
}

// RdRMomentsFollowingClient is a client for the RdRMomentsFollowing schema.
type RdRMomentsFollowingClient struct {
	config
}

// NewRdRMomentsFollowingClient returns a client for the RdRMomentsFollowing from the given config.
func NewRdRMomentsFollowingClient(c config) *RdRMomentsFollowingClient {
	return &RdRMomentsFollowingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rdrmomentsfollowing.Hooks(f(g(h())))`.
func (c *RdRMomentsFollowingClient) Use(hooks ...Hook) {
	c.hooks.RdRMomentsFollowing = append(c.hooks.RdRMomentsFollowing, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rdrmomentsfollowing.Intercept(f(g(h())))`.
func (c *RdRMomentsFollowingClient) Intercept(interceptors ...Interceptor) {
	c.inters.RdRMomentsFollowing = append(c.inters.RdRMomentsFollowing, interceptors...)
}

// Create returns a builder for creating a RdRMomentsFollowing entity.
func (c *RdRMomentsFollowingClient) Create() *RdRMomentsFollowingCreate {
	mutation := newRdRMomentsFollowingMutation(c.config, OpCreate)
	return &RdRMomentsFollowingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RdRMomentsFollowing entities.
func (c *RdRMomentsFollowingClient) CreateBulk(builders ...*RdRMomentsFollowingCreate) *RdRMomentsFollowingCreateBulk {
	return &RdRMomentsFollowingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RdRMomentsFollowing.
func (c *RdRMomentsFollowingClient) Update() *RdRMomentsFollowingUpdate {
	mutation := newRdRMomentsFollowingMutation(c.config, OpUpdate)
	return &RdRMomentsFollowingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RdRMomentsFollowingClient) UpdateOne(rrf *RdRMomentsFollowing) *RdRMomentsFollowingUpdateOne {
	mutation := newRdRMomentsFollowingMutation(c.config, OpUpdateOne, withRdRMomentsFollowing(rrf))
	return &RdRMomentsFollowingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RdRMomentsFollowingClient) UpdateOneID(id int64) *RdRMomentsFollowingUpdateOne {
	mutation := newRdRMomentsFollowingMutation(c.config, OpUpdateOne, withRdRMomentsFollowingID(id))
	return &RdRMomentsFollowingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RdRMomentsFollowing.
func (c *RdRMomentsFollowingClient) Delete() *RdRMomentsFollowingDelete {
	mutation := newRdRMomentsFollowingMutation(c.config, OpDelete)
	return &RdRMomentsFollowingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RdRMomentsFollowingClient) DeleteOne(rrf *RdRMomentsFollowing) *RdRMomentsFollowingDeleteOne {
	return c.DeleteOneID(rrf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RdRMomentsFollowingClient) DeleteOneID(id int64) *RdRMomentsFollowingDeleteOne {
	builder := c.Delete().Where(rdrmomentsfollowing.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RdRMomentsFollowingDeleteOne{builder}
}

// Query returns a query builder for RdRMomentsFollowing.
func (c *RdRMomentsFollowingClient) Query() *RdRMomentsFollowingQuery {
	return &RdRMomentsFollowingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRdRMomentsFollowing},
		inters: c.Interceptors(),
	}
}

// Get returns a RdRMomentsFollowing entity by its id.
func (c *RdRMomentsFollowingClient) Get(ctx context.Context, id int64) (*RdRMomentsFollowing, error) {
	return c.Query().Where(rdrmomentsfollowing.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RdRMomentsFollowingClient) GetX(ctx context.Context, id int64) *RdRMomentsFollowing {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RdRMomentsFollowingClient) Hooks() []Hook {
	return c.hooks.RdRMomentsFollowing
}

// Interceptors returns the client interceptors.
func (c *RdRMomentsFollowingClient) Interceptors() []Interceptor {
	return c.inters.RdRMomentsFollowing
}

func (c *RdRMomentsFollowingClient) mutate(ctx context.Context, m *RdRMomentsFollowingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RdRMomentsFollowingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RdRMomentsFollowingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RdRMomentsFollowingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RdRMomentsFollowingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RdRMomentsFollowing mutation op: %q", m.Op())
	}
}

// RdRUserFollowersClient is a client for the RdRUserFollowers schema.
type RdRUserFollowersClient struct {
	config
}

// NewRdRUserFollowersClient returns a client for the RdRUserFollowers from the given config.
func NewRdRUserFollowersClient(c config) *RdRUserFollowersClient {
	return &RdRUserFollowersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rdruserfollowers.Hooks(f(g(h())))`.
func (c *RdRUserFollowersClient) Use(hooks ...Hook) {
	c.hooks.RdRUserFollowers = append(c.hooks.RdRUserFollowers, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rdruserfollowers.Intercept(f(g(h())))`.
func (c *RdRUserFollowersClient) Intercept(interceptors ...Interceptor) {
	c.inters.RdRUserFollowers = append(c.inters.RdRUserFollowers, interceptors...)
}

// Create returns a builder for creating a RdRUserFollowers entity.
func (c *RdRUserFollowersClient) Create() *RdRUserFollowersCreate {
	mutation := newRdRUserFollowersMutation(c.config, OpCreate)
	return &RdRUserFollowersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RdRUserFollowers entities.
func (c *RdRUserFollowersClient) CreateBulk(builders ...*RdRUserFollowersCreate) *RdRUserFollowersCreateBulk {
	return &RdRUserFollowersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RdRUserFollowers.
func (c *RdRUserFollowersClient) Update() *RdRUserFollowersUpdate {
	mutation := newRdRUserFollowersMutation(c.config, OpUpdate)
	return &RdRUserFollowersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RdRUserFollowersClient) UpdateOne(rrf *RdRUserFollowers) *RdRUserFollowersUpdateOne {
	mutation := newRdRUserFollowersMutation(c.config, OpUpdateOne, withRdRUserFollowers(rrf))
	return &RdRUserFollowersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RdRUserFollowersClient) UpdateOneID(id int64) *RdRUserFollowersUpdateOne {
	mutation := newRdRUserFollowersMutation(c.config, OpUpdateOne, withRdRUserFollowersID(id))
	return &RdRUserFollowersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RdRUserFollowers.
func (c *RdRUserFollowersClient) Delete() *RdRUserFollowersDelete {
	mutation := newRdRUserFollowersMutation(c.config, OpDelete)
	return &RdRUserFollowersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RdRUserFollowersClient) DeleteOne(rrf *RdRUserFollowers) *RdRUserFollowersDeleteOne {
	return c.DeleteOneID(rrf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RdRUserFollowersClient) DeleteOneID(id int64) *RdRUserFollowersDeleteOne {
	builder := c.Delete().Where(rdruserfollowers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RdRUserFollowersDeleteOne{builder}
}

// Query returns a query builder for RdRUserFollowers.
func (c *RdRUserFollowersClient) Query() *RdRUserFollowersQuery {
	return &RdRUserFollowersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRdRUserFollowers},
		inters: c.Interceptors(),
	}
}

// Get returns a RdRUserFollowers entity by its id.
func (c *RdRUserFollowersClient) Get(ctx context.Context, id int64) (*RdRUserFollowers, error) {
	return c.Query().Where(rdruserfollowers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RdRUserFollowersClient) GetX(ctx context.Context, id int64) *RdRUserFollowers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RdRUserFollowersClient) Hooks() []Hook {
	return c.hooks.RdRUserFollowers
}

// Interceptors returns the client interceptors.
func (c *RdRUserFollowersClient) Interceptors() []Interceptor {
	return c.inters.RdRUserFollowers
}

func (c *RdRUserFollowersClient) mutate(ctx context.Context, m *RdRUserFollowersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RdRUserFollowersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RdRUserFollowersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RdRUserFollowersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RdRUserFollowersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RdRUserFollowers mutation op: %q", m.Op())
	}
}

// RdRUserFollowingClient is a client for the RdRUserFollowing schema.
type RdRUserFollowingClient struct {
	config
}

// NewRdRUserFollowingClient returns a client for the RdRUserFollowing from the given config.
func NewRdRUserFollowingClient(c config) *RdRUserFollowingClient {
	return &RdRUserFollowingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rdruserfollowing.Hooks(f(g(h())))`.
func (c *RdRUserFollowingClient) Use(hooks ...Hook) {
	c.hooks.RdRUserFollowing = append(c.hooks.RdRUserFollowing, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rdruserfollowing.Intercept(f(g(h())))`.
func (c *RdRUserFollowingClient) Intercept(interceptors ...Interceptor) {
	c.inters.RdRUserFollowing = append(c.inters.RdRUserFollowing, interceptors...)
}

// Create returns a builder for creating a RdRUserFollowing entity.
func (c *RdRUserFollowingClient) Create() *RdRUserFollowingCreate {
	mutation := newRdRUserFollowingMutation(c.config, OpCreate)
	return &RdRUserFollowingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RdRUserFollowing entities.
func (c *RdRUserFollowingClient) CreateBulk(builders ...*RdRUserFollowingCreate) *RdRUserFollowingCreateBulk {
	return &RdRUserFollowingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RdRUserFollowing.
func (c *RdRUserFollowingClient) Update() *RdRUserFollowingUpdate {
	mutation := newRdRUserFollowingMutation(c.config, OpUpdate)
	return &RdRUserFollowingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RdRUserFollowingClient) UpdateOne(rrf *RdRUserFollowing) *RdRUserFollowingUpdateOne {
	mutation := newRdRUserFollowingMutation(c.config, OpUpdateOne, withRdRUserFollowing(rrf))
	return &RdRUserFollowingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RdRUserFollowingClient) UpdateOneID(id int64) *RdRUserFollowingUpdateOne {
	mutation := newRdRUserFollowingMutation(c.config, OpUpdateOne, withRdRUserFollowingID(id))
	return &RdRUserFollowingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RdRUserFollowing.
func (c *RdRUserFollowingClient) Delete() *RdRUserFollowingDelete {
	mutation := newRdRUserFollowingMutation(c.config, OpDelete)
	return &RdRUserFollowingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RdRUserFollowingClient) DeleteOne(rrf *RdRUserFollowing) *RdRUserFollowingDeleteOne {
	return c.DeleteOneID(rrf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RdRUserFollowingClient) DeleteOneID(id int64) *RdRUserFollowingDeleteOne {
	builder := c.Delete().Where(rdruserfollowing.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RdRUserFollowingDeleteOne{builder}
}

// Query returns a query builder for RdRUserFollowing.
func (c *RdRUserFollowingClient) Query() *RdRUserFollowingQuery {
	return &RdRUserFollowingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRdRUserFollowing},
		inters: c.Interceptors(),
	}
}

// Get returns a RdRUserFollowing entity by its id.
func (c *RdRUserFollowingClient) Get(ctx context.Context, id int64) (*RdRUserFollowing, error) {
	return c.Query().Where(rdruserfollowing.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RdRUserFollowingClient) GetX(ctx context.Context, id int64) *RdRUserFollowing {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RdRUserFollowingClient) Hooks() []Hook {
	return c.hooks.RdRUserFollowing
}

// Interceptors returns the client interceptors.
func (c *RdRUserFollowingClient) Interceptors() []Interceptor {
	return c.inters.RdRUserFollowing
}

func (c *RdRUserFollowingClient) mutate(ctx context.Context, m *RdRUserFollowingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RdRUserFollowingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RdRUserFollowingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RdRUserFollowingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RdRUserFollowingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RdRUserFollowing mutation op: %q", m.Op())
	}
}

// RdUserClient is a client for the RdUser schema.
type RdUserClient struct {
	config
}

// NewRdUserClient returns a client for the RdUser from the given config.
func NewRdUserClient(c config) *RdUserClient {
	return &RdUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rduser.Hooks(f(g(h())))`.
func (c *RdUserClient) Use(hooks ...Hook) {
	c.hooks.RdUser = append(c.hooks.RdUser, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rduser.Intercept(f(g(h())))`.
func (c *RdUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.RdUser = append(c.inters.RdUser, interceptors...)
}

// Create returns a builder for creating a RdUser entity.
func (c *RdUserClient) Create() *RdUserCreate {
	mutation := newRdUserMutation(c.config, OpCreate)
	return &RdUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RdUser entities.
func (c *RdUserClient) CreateBulk(builders ...*RdUserCreate) *RdUserCreateBulk {
	return &RdUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RdUser.
func (c *RdUserClient) Update() *RdUserUpdate {
	mutation := newRdUserMutation(c.config, OpUpdate)
	return &RdUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RdUserClient) UpdateOne(ru *RdUser) *RdUserUpdateOne {
	mutation := newRdUserMutation(c.config, OpUpdateOne, withRdUser(ru))
	return &RdUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RdUserClient) UpdateOneID(id int32) *RdUserUpdateOne {
	mutation := newRdUserMutation(c.config, OpUpdateOne, withRdUserID(id))
	return &RdUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RdUser.
func (c *RdUserClient) Delete() *RdUserDelete {
	mutation := newRdUserMutation(c.config, OpDelete)
	return &RdUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RdUserClient) DeleteOne(ru *RdUser) *RdUserDeleteOne {
	return c.DeleteOneID(ru.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RdUserClient) DeleteOneID(id int32) *RdUserDeleteOne {
	builder := c.Delete().Where(rduser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RdUserDeleteOne{builder}
}

// Query returns a query builder for RdUser.
func (c *RdUserClient) Query() *RdUserQuery {
	return &RdUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRdUser},
		inters: c.Interceptors(),
	}
}

// Get returns a RdUser entity by its id.
func (c *RdUserClient) Get(ctx context.Context, id int32) (*RdUser, error) {
	return c.Query().Where(rduser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RdUserClient) GetX(ctx context.Context, id int32) *RdUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RdUserClient) Hooks() []Hook {
	return c.hooks.RdUser
}

// Interceptors returns the client interceptors.
func (c *RdUserClient) Interceptors() []Interceptor {
	return c.inters.RdUser
}

func (c *RdUserClient) mutate(ctx context.Context, m *RdUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RdUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RdUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RdUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RdUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RdUser mutation op: %q", m.Op())
	}
}
