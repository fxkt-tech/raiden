// Code generated by ent, DO NOT EDIT.

package rdrmomentsfollowing

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLTE(FieldID, id))
}

// MomentID applies equality check predicate on the "moment_id" field. It's identical to MomentIDEQ.
func MomentID(v int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldMomentID, v))
}

// MomentType applies equality check predicate on the "moment_type" field. It's identical to MomentTypeEQ.
func MomentType(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldMomentType, v))
}

// ByUID applies equality check predicate on the "by_uid" field. It's identical to ByUIDEQ.
func ByUID(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldByUID, v))
}

// ForUID applies equality check predicate on the "for_uid" field. It's identical to ForUIDEQ.
func ForUID(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldForUID, v))
}

// Txt applies equality check predicate on the "txt" field. It's identical to TxtEQ.
func Txt(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldTxt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldStatus, v))
}

// PublishTime applies equality check predicate on the "publish_time" field. It's identical to PublishTimeEQ.
func PublishTime(v time.Time) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldPublishTime, v))
}

// MomentIDEQ applies the EQ predicate on the "moment_id" field.
func MomentIDEQ(v int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldMomentID, v))
}

// MomentIDNEQ applies the NEQ predicate on the "moment_id" field.
func MomentIDNEQ(v int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNEQ(FieldMomentID, v))
}

// MomentIDIn applies the In predicate on the "moment_id" field.
func MomentIDIn(vs ...int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIn(FieldMomentID, vs...))
}

// MomentIDNotIn applies the NotIn predicate on the "moment_id" field.
func MomentIDNotIn(vs ...int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotIn(FieldMomentID, vs...))
}

// MomentIDGT applies the GT predicate on the "moment_id" field.
func MomentIDGT(v int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGT(FieldMomentID, v))
}

// MomentIDGTE applies the GTE predicate on the "moment_id" field.
func MomentIDGTE(v int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGTE(FieldMomentID, v))
}

// MomentIDLT applies the LT predicate on the "moment_id" field.
func MomentIDLT(v int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLT(FieldMomentID, v))
}

// MomentIDLTE applies the LTE predicate on the "moment_id" field.
func MomentIDLTE(v int64) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLTE(FieldMomentID, v))
}

// MomentIDIsNil applies the IsNil predicate on the "moment_id" field.
func MomentIDIsNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIsNull(FieldMomentID))
}

// MomentIDNotNil applies the NotNil predicate on the "moment_id" field.
func MomentIDNotNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotNull(FieldMomentID))
}

// MomentTypeEQ applies the EQ predicate on the "moment_type" field.
func MomentTypeEQ(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldMomentType, v))
}

// MomentTypeNEQ applies the NEQ predicate on the "moment_type" field.
func MomentTypeNEQ(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNEQ(FieldMomentType, v))
}

// MomentTypeIn applies the In predicate on the "moment_type" field.
func MomentTypeIn(vs ...int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIn(FieldMomentType, vs...))
}

// MomentTypeNotIn applies the NotIn predicate on the "moment_type" field.
func MomentTypeNotIn(vs ...int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotIn(FieldMomentType, vs...))
}

// MomentTypeGT applies the GT predicate on the "moment_type" field.
func MomentTypeGT(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGT(FieldMomentType, v))
}

// MomentTypeGTE applies the GTE predicate on the "moment_type" field.
func MomentTypeGTE(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGTE(FieldMomentType, v))
}

// MomentTypeLT applies the LT predicate on the "moment_type" field.
func MomentTypeLT(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLT(FieldMomentType, v))
}

// MomentTypeLTE applies the LTE predicate on the "moment_type" field.
func MomentTypeLTE(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLTE(FieldMomentType, v))
}

// MomentTypeIsNil applies the IsNil predicate on the "moment_type" field.
func MomentTypeIsNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIsNull(FieldMomentType))
}

// MomentTypeNotNil applies the NotNil predicate on the "moment_type" field.
func MomentTypeNotNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotNull(FieldMomentType))
}

// ByUIDEQ applies the EQ predicate on the "by_uid" field.
func ByUIDEQ(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldByUID, v))
}

// ByUIDNEQ applies the NEQ predicate on the "by_uid" field.
func ByUIDNEQ(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNEQ(FieldByUID, v))
}

// ByUIDIn applies the In predicate on the "by_uid" field.
func ByUIDIn(vs ...int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIn(FieldByUID, vs...))
}

// ByUIDNotIn applies the NotIn predicate on the "by_uid" field.
func ByUIDNotIn(vs ...int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotIn(FieldByUID, vs...))
}

// ByUIDGT applies the GT predicate on the "by_uid" field.
func ByUIDGT(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGT(FieldByUID, v))
}

// ByUIDGTE applies the GTE predicate on the "by_uid" field.
func ByUIDGTE(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGTE(FieldByUID, v))
}

// ByUIDLT applies the LT predicate on the "by_uid" field.
func ByUIDLT(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLT(FieldByUID, v))
}

// ByUIDLTE applies the LTE predicate on the "by_uid" field.
func ByUIDLTE(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLTE(FieldByUID, v))
}

// ByUIDIsNil applies the IsNil predicate on the "by_uid" field.
func ByUIDIsNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIsNull(FieldByUID))
}

// ByUIDNotNil applies the NotNil predicate on the "by_uid" field.
func ByUIDNotNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotNull(FieldByUID))
}

// ForUIDEQ applies the EQ predicate on the "for_uid" field.
func ForUIDEQ(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldForUID, v))
}

// ForUIDNEQ applies the NEQ predicate on the "for_uid" field.
func ForUIDNEQ(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNEQ(FieldForUID, v))
}

// ForUIDIn applies the In predicate on the "for_uid" field.
func ForUIDIn(vs ...int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIn(FieldForUID, vs...))
}

// ForUIDNotIn applies the NotIn predicate on the "for_uid" field.
func ForUIDNotIn(vs ...int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotIn(FieldForUID, vs...))
}

// ForUIDGT applies the GT predicate on the "for_uid" field.
func ForUIDGT(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGT(FieldForUID, v))
}

// ForUIDGTE applies the GTE predicate on the "for_uid" field.
func ForUIDGTE(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGTE(FieldForUID, v))
}

// ForUIDLT applies the LT predicate on the "for_uid" field.
func ForUIDLT(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLT(FieldForUID, v))
}

// ForUIDLTE applies the LTE predicate on the "for_uid" field.
func ForUIDLTE(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLTE(FieldForUID, v))
}

// ForUIDIsNil applies the IsNil predicate on the "for_uid" field.
func ForUIDIsNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIsNull(FieldForUID))
}

// ForUIDNotNil applies the NotNil predicate on the "for_uid" field.
func ForUIDNotNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotNull(FieldForUID))
}

// TxtEQ applies the EQ predicate on the "txt" field.
func TxtEQ(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldTxt, v))
}

// TxtNEQ applies the NEQ predicate on the "txt" field.
func TxtNEQ(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNEQ(FieldTxt, v))
}

// TxtIn applies the In predicate on the "txt" field.
func TxtIn(vs ...string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIn(FieldTxt, vs...))
}

// TxtNotIn applies the NotIn predicate on the "txt" field.
func TxtNotIn(vs ...string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotIn(FieldTxt, vs...))
}

// TxtGT applies the GT predicate on the "txt" field.
func TxtGT(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGT(FieldTxt, v))
}

// TxtGTE applies the GTE predicate on the "txt" field.
func TxtGTE(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGTE(FieldTxt, v))
}

// TxtLT applies the LT predicate on the "txt" field.
func TxtLT(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLT(FieldTxt, v))
}

// TxtLTE applies the LTE predicate on the "txt" field.
func TxtLTE(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLTE(FieldTxt, v))
}

// TxtContains applies the Contains predicate on the "txt" field.
func TxtContains(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldContains(FieldTxt, v))
}

// TxtHasPrefix applies the HasPrefix predicate on the "txt" field.
func TxtHasPrefix(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldHasPrefix(FieldTxt, v))
}

// TxtHasSuffix applies the HasSuffix predicate on the "txt" field.
func TxtHasSuffix(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldHasSuffix(FieldTxt, v))
}

// TxtEqualFold applies the EqualFold predicate on the "txt" field.
func TxtEqualFold(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEqualFold(FieldTxt, v))
}

// TxtContainsFold applies the ContainsFold predicate on the "txt" field.
func TxtContainsFold(v string) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldContainsFold(FieldTxt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotNull(FieldStatus))
}

// PublishTimeEQ applies the EQ predicate on the "publish_time" field.
func PublishTimeEQ(v time.Time) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldEQ(FieldPublishTime, v))
}

// PublishTimeNEQ applies the NEQ predicate on the "publish_time" field.
func PublishTimeNEQ(v time.Time) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNEQ(FieldPublishTime, v))
}

// PublishTimeIn applies the In predicate on the "publish_time" field.
func PublishTimeIn(vs ...time.Time) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldIn(FieldPublishTime, vs...))
}

// PublishTimeNotIn applies the NotIn predicate on the "publish_time" field.
func PublishTimeNotIn(vs ...time.Time) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldNotIn(FieldPublishTime, vs...))
}

// PublishTimeGT applies the GT predicate on the "publish_time" field.
func PublishTimeGT(v time.Time) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGT(FieldPublishTime, v))
}

// PublishTimeGTE applies the GTE predicate on the "publish_time" field.
func PublishTimeGTE(v time.Time) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldGTE(FieldPublishTime, v))
}

// PublishTimeLT applies the LT predicate on the "publish_time" field.
func PublishTimeLT(v time.Time) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLT(FieldPublishTime, v))
}

// PublishTimeLTE applies the LTE predicate on the "publish_time" field.
func PublishTimeLTE(v time.Time) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(sql.FieldLTE(FieldPublishTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RdRMomentsFollowing) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RdRMomentsFollowing) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RdRMomentsFollowing) predicate.RdRMomentsFollowing {
	return predicate.RdRMomentsFollowing(func(s *sql.Selector) {
		p(s.Not())
	})
}
