// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/biz"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdmessage"
)

// RdMessageCreate is the builder for creating a RdMessage entity.
type RdMessageCreate struct {
	config
	mutation *RdMessageMutation
	hooks    []Hook
}

// SetSenderUID sets the "sender_uid" field.
func (rmc *RdMessageCreate) SetSenderUID(i int32) *RdMessageCreate {
	rmc.mutation.SetSenderUID(i)
	return rmc
}

// SetNillableSenderUID sets the "sender_uid" field if the given value is not nil.
func (rmc *RdMessageCreate) SetNillableSenderUID(i *int32) *RdMessageCreate {
	if i != nil {
		rmc.SetSenderUID(*i)
	}
	return rmc
}

// SetRecverUID sets the "recver_uid" field.
func (rmc *RdMessageCreate) SetRecverUID(i int32) *RdMessageCreate {
	rmc.mutation.SetRecverUID(i)
	return rmc
}

// SetNillableRecverUID sets the "recver_uid" field if the given value is not nil.
func (rmc *RdMessageCreate) SetNillableRecverUID(i *int32) *RdMessageCreate {
	if i != nil {
		rmc.SetRecverUID(*i)
	}
	return rmc
}

// SetContent sets the "content" field.
func (rmc *RdMessageCreate) SetContent(b *biz.Content) *RdMessageCreate {
	rmc.mutation.SetContent(b)
	return rmc
}

// SetCreateTime sets the "create_time" field.
func (rmc *RdMessageCreate) SetCreateTime(t time.Time) *RdMessageCreate {
	rmc.mutation.SetCreateTime(t)
	return rmc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rmc *RdMessageCreate) SetNillableCreateTime(t *time.Time) *RdMessageCreate {
	if t != nil {
		rmc.SetCreateTime(*t)
	}
	return rmc
}

// SetID sets the "id" field.
func (rmc *RdMessageCreate) SetID(i int32) *RdMessageCreate {
	rmc.mutation.SetID(i)
	return rmc
}

// Mutation returns the RdMessageMutation object of the builder.
func (rmc *RdMessageCreate) Mutation() *RdMessageMutation {
	return rmc.mutation
}

// Save creates the RdMessage in the database.
func (rmc *RdMessageCreate) Save(ctx context.Context) (*RdMessage, error) {
	rmc.defaults()
	return withHooks[*RdMessage, RdMessageMutation](ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RdMessageCreate) SaveX(ctx context.Context) *RdMessage {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RdMessageCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RdMessageCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmc *RdMessageCreate) defaults() {
	if _, ok := rmc.mutation.CreateTime(); !ok {
		v := rdmessage.DefaultCreateTime()
		rmc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RdMessageCreate) check() error {
	if _, ok := rmc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "RdMessage.content"`)}
	}
	if _, ok := rmc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "RdMessage.create_time"`)}
	}
	return nil
}

func (rmc *RdMessageCreate) sqlSave(ctx context.Context) (*RdMessage, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *RdMessageCreate) createSpec() (*RdMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &RdMessage{config: rmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rdmessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: rdmessage.FieldID,
			},
		}
	)
	if id, ok := rmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rmc.mutation.SenderUID(); ok {
		_spec.SetField(rdmessage.FieldSenderUID, field.TypeInt32, value)
		_node.SenderUID = value
	}
	if value, ok := rmc.mutation.RecverUID(); ok {
		_spec.SetField(rdmessage.FieldRecverUID, field.TypeInt32, value)
		_node.RecverUID = value
	}
	if value, ok := rmc.mutation.Content(); ok {
		_spec.SetField(rdmessage.FieldContent, field.TypeJSON, value)
		_node.Content = value
	}
	if value, ok := rmc.mutation.CreateTime(); ok {
		_spec.SetField(rdmessage.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// RdMessageCreateBulk is the builder for creating many RdMessage entities in bulk.
type RdMessageCreateBulk struct {
	config
	builders []*RdMessageCreate
}

// Save creates the RdMessage entities in the database.
func (rmcb *RdMessageCreateBulk) Save(ctx context.Context) ([]*RdMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RdMessage, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RdMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RdMessageCreateBulk) SaveX(ctx context.Context) []*RdMessage {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RdMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RdMessageCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
