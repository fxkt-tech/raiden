// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/predicate"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdmoment"
)

// RdMomentUpdate is the builder for updating RdMoment entities.
type RdMomentUpdate struct {
	config
	hooks    []Hook
	mutation *RdMomentMutation
}

// Where appends a list predicates to the RdMomentUpdate builder.
func (rmu *RdMomentUpdate) Where(ps ...predicate.RdMoment) *RdMomentUpdate {
	rmu.mutation.Where(ps...)
	return rmu
}

// SetType sets the "type" field.
func (rmu *RdMomentUpdate) SetType(i int32) *RdMomentUpdate {
	rmu.mutation.ResetType()
	rmu.mutation.SetType(i)
	return rmu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rmu *RdMomentUpdate) SetNillableType(i *int32) *RdMomentUpdate {
	if i != nil {
		rmu.SetType(*i)
	}
	return rmu
}

// AddType adds i to the "type" field.
func (rmu *RdMomentUpdate) AddType(i int32) *RdMomentUpdate {
	rmu.mutation.AddType(i)
	return rmu
}

// ClearType clears the value of the "type" field.
func (rmu *RdMomentUpdate) ClearType() *RdMomentUpdate {
	rmu.mutation.ClearType()
	return rmu
}

// SetByUID sets the "by_uid" field.
func (rmu *RdMomentUpdate) SetByUID(i int32) *RdMomentUpdate {
	rmu.mutation.ResetByUID()
	rmu.mutation.SetByUID(i)
	return rmu
}

// SetNillableByUID sets the "by_uid" field if the given value is not nil.
func (rmu *RdMomentUpdate) SetNillableByUID(i *int32) *RdMomentUpdate {
	if i != nil {
		rmu.SetByUID(*i)
	}
	return rmu
}

// AddByUID adds i to the "by_uid" field.
func (rmu *RdMomentUpdate) AddByUID(i int32) *RdMomentUpdate {
	rmu.mutation.AddByUID(i)
	return rmu
}

// ClearByUID clears the value of the "by_uid" field.
func (rmu *RdMomentUpdate) ClearByUID() *RdMomentUpdate {
	rmu.mutation.ClearByUID()
	return rmu
}

// SetTxt sets the "txt" field.
func (rmu *RdMomentUpdate) SetTxt(s string) *RdMomentUpdate {
	rmu.mutation.SetTxt(s)
	return rmu
}

// SetImgs sets the "imgs" field.
func (rmu *RdMomentUpdate) SetImgs(s []string) *RdMomentUpdate {
	rmu.mutation.SetImgs(s)
	return rmu
}

// AppendImgs appends s to the "imgs" field.
func (rmu *RdMomentUpdate) AppendImgs(s []string) *RdMomentUpdate {
	rmu.mutation.AppendImgs(s)
	return rmu
}

// SetStatus sets the "status" field.
func (rmu *RdMomentUpdate) SetStatus(i int32) *RdMomentUpdate {
	rmu.mutation.ResetStatus()
	rmu.mutation.SetStatus(i)
	return rmu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rmu *RdMomentUpdate) SetNillableStatus(i *int32) *RdMomentUpdate {
	if i != nil {
		rmu.SetStatus(*i)
	}
	return rmu
}

// AddStatus adds i to the "status" field.
func (rmu *RdMomentUpdate) AddStatus(i int32) *RdMomentUpdate {
	rmu.mutation.AddStatus(i)
	return rmu
}

// ClearStatus clears the value of the "status" field.
func (rmu *RdMomentUpdate) ClearStatus() *RdMomentUpdate {
	rmu.mutation.ClearStatus()
	return rmu
}

// SetPublishTime sets the "publish_time" field.
func (rmu *RdMomentUpdate) SetPublishTime(t time.Time) *RdMomentUpdate {
	rmu.mutation.SetPublishTime(t)
	return rmu
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (rmu *RdMomentUpdate) SetNillablePublishTime(t *time.Time) *RdMomentUpdate {
	if t != nil {
		rmu.SetPublishTime(*t)
	}
	return rmu
}

// Mutation returns the RdMomentMutation object of the builder.
func (rmu *RdMomentUpdate) Mutation() *RdMomentMutation {
	return rmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmu *RdMomentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RdMomentMutation](ctx, rmu.sqlSave, rmu.mutation, rmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmu *RdMomentUpdate) SaveX(ctx context.Context) int {
	affected, err := rmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmu *RdMomentUpdate) Exec(ctx context.Context) error {
	_, err := rmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmu *RdMomentUpdate) ExecX(ctx context.Context) {
	if err := rmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rmu *RdMomentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rdmoment.Table,
			Columns: rdmoment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: rdmoment.FieldID,
			},
		},
	}
	if ps := rmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmu.mutation.GetType(); ok {
		_spec.SetField(rdmoment.FieldType, field.TypeInt32, value)
	}
	if value, ok := rmu.mutation.AddedType(); ok {
		_spec.AddField(rdmoment.FieldType, field.TypeInt32, value)
	}
	if rmu.mutation.TypeCleared() {
		_spec.ClearField(rdmoment.FieldType, field.TypeInt32)
	}
	if value, ok := rmu.mutation.ByUID(); ok {
		_spec.SetField(rdmoment.FieldByUID, field.TypeInt32, value)
	}
	if value, ok := rmu.mutation.AddedByUID(); ok {
		_spec.AddField(rdmoment.FieldByUID, field.TypeInt32, value)
	}
	if rmu.mutation.ByUIDCleared() {
		_spec.ClearField(rdmoment.FieldByUID, field.TypeInt32)
	}
	if value, ok := rmu.mutation.Txt(); ok {
		_spec.SetField(rdmoment.FieldTxt, field.TypeString, value)
	}
	if value, ok := rmu.mutation.Imgs(); ok {
		_spec.SetField(rdmoment.FieldImgs, field.TypeJSON, value)
	}
	if value, ok := rmu.mutation.AppendedImgs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rdmoment.FieldImgs, value)
		})
	}
	if value, ok := rmu.mutation.Status(); ok {
		_spec.SetField(rdmoment.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := rmu.mutation.AddedStatus(); ok {
		_spec.AddField(rdmoment.FieldStatus, field.TypeInt32, value)
	}
	if rmu.mutation.StatusCleared() {
		_spec.ClearField(rdmoment.FieldStatus, field.TypeInt32)
	}
	if value, ok := rmu.mutation.PublishTime(); ok {
		_spec.SetField(rdmoment.FieldPublishTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rdmoment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmu.mutation.done = true
	return n, nil
}

// RdMomentUpdateOne is the builder for updating a single RdMoment entity.
type RdMomentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RdMomentMutation
}

// SetType sets the "type" field.
func (rmuo *RdMomentUpdateOne) SetType(i int32) *RdMomentUpdateOne {
	rmuo.mutation.ResetType()
	rmuo.mutation.SetType(i)
	return rmuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rmuo *RdMomentUpdateOne) SetNillableType(i *int32) *RdMomentUpdateOne {
	if i != nil {
		rmuo.SetType(*i)
	}
	return rmuo
}

// AddType adds i to the "type" field.
func (rmuo *RdMomentUpdateOne) AddType(i int32) *RdMomentUpdateOne {
	rmuo.mutation.AddType(i)
	return rmuo
}

// ClearType clears the value of the "type" field.
func (rmuo *RdMomentUpdateOne) ClearType() *RdMomentUpdateOne {
	rmuo.mutation.ClearType()
	return rmuo
}

// SetByUID sets the "by_uid" field.
func (rmuo *RdMomentUpdateOne) SetByUID(i int32) *RdMomentUpdateOne {
	rmuo.mutation.ResetByUID()
	rmuo.mutation.SetByUID(i)
	return rmuo
}

// SetNillableByUID sets the "by_uid" field if the given value is not nil.
func (rmuo *RdMomentUpdateOne) SetNillableByUID(i *int32) *RdMomentUpdateOne {
	if i != nil {
		rmuo.SetByUID(*i)
	}
	return rmuo
}

// AddByUID adds i to the "by_uid" field.
func (rmuo *RdMomentUpdateOne) AddByUID(i int32) *RdMomentUpdateOne {
	rmuo.mutation.AddByUID(i)
	return rmuo
}

// ClearByUID clears the value of the "by_uid" field.
func (rmuo *RdMomentUpdateOne) ClearByUID() *RdMomentUpdateOne {
	rmuo.mutation.ClearByUID()
	return rmuo
}

// SetTxt sets the "txt" field.
func (rmuo *RdMomentUpdateOne) SetTxt(s string) *RdMomentUpdateOne {
	rmuo.mutation.SetTxt(s)
	return rmuo
}

// SetImgs sets the "imgs" field.
func (rmuo *RdMomentUpdateOne) SetImgs(s []string) *RdMomentUpdateOne {
	rmuo.mutation.SetImgs(s)
	return rmuo
}

// AppendImgs appends s to the "imgs" field.
func (rmuo *RdMomentUpdateOne) AppendImgs(s []string) *RdMomentUpdateOne {
	rmuo.mutation.AppendImgs(s)
	return rmuo
}

// SetStatus sets the "status" field.
func (rmuo *RdMomentUpdateOne) SetStatus(i int32) *RdMomentUpdateOne {
	rmuo.mutation.ResetStatus()
	rmuo.mutation.SetStatus(i)
	return rmuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rmuo *RdMomentUpdateOne) SetNillableStatus(i *int32) *RdMomentUpdateOne {
	if i != nil {
		rmuo.SetStatus(*i)
	}
	return rmuo
}

// AddStatus adds i to the "status" field.
func (rmuo *RdMomentUpdateOne) AddStatus(i int32) *RdMomentUpdateOne {
	rmuo.mutation.AddStatus(i)
	return rmuo
}

// ClearStatus clears the value of the "status" field.
func (rmuo *RdMomentUpdateOne) ClearStatus() *RdMomentUpdateOne {
	rmuo.mutation.ClearStatus()
	return rmuo
}

// SetPublishTime sets the "publish_time" field.
func (rmuo *RdMomentUpdateOne) SetPublishTime(t time.Time) *RdMomentUpdateOne {
	rmuo.mutation.SetPublishTime(t)
	return rmuo
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (rmuo *RdMomentUpdateOne) SetNillablePublishTime(t *time.Time) *RdMomentUpdateOne {
	if t != nil {
		rmuo.SetPublishTime(*t)
	}
	return rmuo
}

// Mutation returns the RdMomentMutation object of the builder.
func (rmuo *RdMomentUpdateOne) Mutation() *RdMomentMutation {
	return rmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmuo *RdMomentUpdateOne) Select(field string, fields ...string) *RdMomentUpdateOne {
	rmuo.fields = append([]string{field}, fields...)
	return rmuo
}

// Save executes the query and returns the updated RdMoment entity.
func (rmuo *RdMomentUpdateOne) Save(ctx context.Context) (*RdMoment, error) {
	return withHooks[*RdMoment, RdMomentMutation](ctx, rmuo.sqlSave, rmuo.mutation, rmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmuo *RdMomentUpdateOne) SaveX(ctx context.Context) *RdMoment {
	node, err := rmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmuo *RdMomentUpdateOne) Exec(ctx context.Context) error {
	_, err := rmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmuo *RdMomentUpdateOne) ExecX(ctx context.Context) {
	if err := rmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rmuo *RdMomentUpdateOne) sqlSave(ctx context.Context) (_node *RdMoment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rdmoment.Table,
			Columns: rdmoment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: rdmoment.FieldID,
			},
		},
	}
	id, ok := rmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RdMoment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rdmoment.FieldID)
		for _, f := range fields {
			if !rdmoment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rdmoment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmuo.mutation.GetType(); ok {
		_spec.SetField(rdmoment.FieldType, field.TypeInt32, value)
	}
	if value, ok := rmuo.mutation.AddedType(); ok {
		_spec.AddField(rdmoment.FieldType, field.TypeInt32, value)
	}
	if rmuo.mutation.TypeCleared() {
		_spec.ClearField(rdmoment.FieldType, field.TypeInt32)
	}
	if value, ok := rmuo.mutation.ByUID(); ok {
		_spec.SetField(rdmoment.FieldByUID, field.TypeInt32, value)
	}
	if value, ok := rmuo.mutation.AddedByUID(); ok {
		_spec.AddField(rdmoment.FieldByUID, field.TypeInt32, value)
	}
	if rmuo.mutation.ByUIDCleared() {
		_spec.ClearField(rdmoment.FieldByUID, field.TypeInt32)
	}
	if value, ok := rmuo.mutation.Txt(); ok {
		_spec.SetField(rdmoment.FieldTxt, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.Imgs(); ok {
		_spec.SetField(rdmoment.FieldImgs, field.TypeJSON, value)
	}
	if value, ok := rmuo.mutation.AppendedImgs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rdmoment.FieldImgs, value)
		})
	}
	if value, ok := rmuo.mutation.Status(); ok {
		_spec.SetField(rdmoment.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := rmuo.mutation.AddedStatus(); ok {
		_spec.AddField(rdmoment.FieldStatus, field.TypeInt32, value)
	}
	if rmuo.mutation.StatusCleared() {
		_spec.ClearField(rdmoment.FieldStatus, field.TypeInt32)
	}
	if value, ok := rmuo.mutation.PublishTime(); ok {
		_spec.SetField(rdmoment.FieldPublishTime, field.TypeTime, value)
	}
	_node = &RdMoment{config: rmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rdmoment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmuo.mutation.done = true
	return _node, nil
}
