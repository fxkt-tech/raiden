// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdmoment"
)

// RdMomentCreate is the builder for creating a RdMoment entity.
type RdMomentCreate struct {
	config
	mutation *RdMomentMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (rmc *RdMomentCreate) SetType(i int32) *RdMomentCreate {
	rmc.mutation.SetType(i)
	return rmc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rmc *RdMomentCreate) SetNillableType(i *int32) *RdMomentCreate {
	if i != nil {
		rmc.SetType(*i)
	}
	return rmc
}

// SetByUID sets the "by_uid" field.
func (rmc *RdMomentCreate) SetByUID(i int32) *RdMomentCreate {
	rmc.mutation.SetByUID(i)
	return rmc
}

// SetNillableByUID sets the "by_uid" field if the given value is not nil.
func (rmc *RdMomentCreate) SetNillableByUID(i *int32) *RdMomentCreate {
	if i != nil {
		rmc.SetByUID(*i)
	}
	return rmc
}

// SetTxt sets the "txt" field.
func (rmc *RdMomentCreate) SetTxt(s string) *RdMomentCreate {
	rmc.mutation.SetTxt(s)
	return rmc
}

// SetImgs sets the "imgs" field.
func (rmc *RdMomentCreate) SetImgs(s []string) *RdMomentCreate {
	rmc.mutation.SetImgs(s)
	return rmc
}

// SetStatus sets the "status" field.
func (rmc *RdMomentCreate) SetStatus(i int32) *RdMomentCreate {
	rmc.mutation.SetStatus(i)
	return rmc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rmc *RdMomentCreate) SetNillableStatus(i *int32) *RdMomentCreate {
	if i != nil {
		rmc.SetStatus(*i)
	}
	return rmc
}

// SetPublishTime sets the "publish_time" field.
func (rmc *RdMomentCreate) SetPublishTime(t time.Time) *RdMomentCreate {
	rmc.mutation.SetPublishTime(t)
	return rmc
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (rmc *RdMomentCreate) SetNillablePublishTime(t *time.Time) *RdMomentCreate {
	if t != nil {
		rmc.SetPublishTime(*t)
	}
	return rmc
}

// SetID sets the "id" field.
func (rmc *RdMomentCreate) SetID(i int64) *RdMomentCreate {
	rmc.mutation.SetID(i)
	return rmc
}

// Mutation returns the RdMomentMutation object of the builder.
func (rmc *RdMomentCreate) Mutation() *RdMomentMutation {
	return rmc.mutation
}

// Save creates the RdMoment in the database.
func (rmc *RdMomentCreate) Save(ctx context.Context) (*RdMoment, error) {
	rmc.defaults()
	return withHooks[*RdMoment, RdMomentMutation](ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RdMomentCreate) SaveX(ctx context.Context) *RdMoment {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RdMomentCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RdMomentCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmc *RdMomentCreate) defaults() {
	if _, ok := rmc.mutation.GetType(); !ok {
		v := rdmoment.DefaultType
		rmc.mutation.SetType(v)
	}
	if _, ok := rmc.mutation.PublishTime(); !ok {
		v := rdmoment.DefaultPublishTime()
		rmc.mutation.SetPublishTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RdMomentCreate) check() error {
	if _, ok := rmc.mutation.Txt(); !ok {
		return &ValidationError{Name: "txt", err: errors.New(`ent: missing required field "RdMoment.txt"`)}
	}
	if _, ok := rmc.mutation.Imgs(); !ok {
		return &ValidationError{Name: "imgs", err: errors.New(`ent: missing required field "RdMoment.imgs"`)}
	}
	if _, ok := rmc.mutation.PublishTime(); !ok {
		return &ValidationError{Name: "publish_time", err: errors.New(`ent: missing required field "RdMoment.publish_time"`)}
	}
	return nil
}

func (rmc *RdMomentCreate) sqlSave(ctx context.Context) (*RdMoment, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *RdMomentCreate) createSpec() (*RdMoment, *sqlgraph.CreateSpec) {
	var (
		_node = &RdMoment{config: rmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rdmoment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: rdmoment.FieldID,
			},
		}
	)
	if id, ok := rmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rmc.mutation.GetType(); ok {
		_spec.SetField(rdmoment.FieldType, field.TypeInt32, value)
		_node.Type = value
	}
	if value, ok := rmc.mutation.ByUID(); ok {
		_spec.SetField(rdmoment.FieldByUID, field.TypeInt32, value)
		_node.ByUID = value
	}
	if value, ok := rmc.mutation.Txt(); ok {
		_spec.SetField(rdmoment.FieldTxt, field.TypeString, value)
		_node.Txt = value
	}
	if value, ok := rmc.mutation.Imgs(); ok {
		_spec.SetField(rdmoment.FieldImgs, field.TypeJSON, value)
		_node.Imgs = value
	}
	if value, ok := rmc.mutation.Status(); ok {
		_spec.SetField(rdmoment.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	if value, ok := rmc.mutation.PublishTime(); ok {
		_spec.SetField(rdmoment.FieldPublishTime, field.TypeTime, value)
		_node.PublishTime = value
	}
	return _node, _spec
}

// RdMomentCreateBulk is the builder for creating many RdMoment entities in bulk.
type RdMomentCreateBulk struct {
	config
	builders []*RdMomentCreate
}

// Save creates the RdMoment entities in the database.
func (rmcb *RdMomentCreateBulk) Save(ctx context.Context) ([]*RdMoment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RdMoment, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RdMomentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RdMomentCreateBulk) SaveX(ctx context.Context) []*RdMoment {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RdMomentCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RdMomentCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
