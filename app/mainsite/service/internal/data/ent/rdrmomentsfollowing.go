// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdrmomentsfollowing"
)

// RdRMomentsFollowing is the model entity for the RdRMomentsFollowing schema.
type RdRMomentsFollowing struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 动态类型 1图文 2视频 3专栏
	MomentID int64 `json:"moment_id,omitempty"`
	// 谁发布的动态
	MomentType int32 `json:"moment_type,omitempty"`
	// 谁发布的动态
	ByUID int32 `json:"by_uid,omitempty"`
	// 谁关注的动态
	ForUID int32 `json:"for_uid,omitempty"`
	// 文字
	Txt string `json:"txt,omitempty"`
	// 动态的图片数组
	Imgs []string `json:"imgs,omitempty"`
	// 关注的人uid
	Status int32 `json:"status,omitempty"`
	// PublishTime holds the value of the "publish_time" field.
	PublishTime time.Time `json:"publish_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RdRMomentsFollowing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rdrmomentsfollowing.FieldImgs:
			values[i] = new([]byte)
		case rdrmomentsfollowing.FieldID, rdrmomentsfollowing.FieldMomentID, rdrmomentsfollowing.FieldMomentType, rdrmomentsfollowing.FieldByUID, rdrmomentsfollowing.FieldForUID, rdrmomentsfollowing.FieldStatus:
			values[i] = new(sql.NullInt64)
		case rdrmomentsfollowing.FieldTxt:
			values[i] = new(sql.NullString)
		case rdrmomentsfollowing.FieldPublishTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RdRMomentsFollowing", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RdRMomentsFollowing fields.
func (rrf *RdRMomentsFollowing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rdrmomentsfollowing.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rrf.ID = int64(value.Int64)
		case rdrmomentsfollowing.FieldMomentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field moment_id", values[i])
			} else if value.Valid {
				rrf.MomentID = value.Int64
			}
		case rdrmomentsfollowing.FieldMomentType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field moment_type", values[i])
			} else if value.Valid {
				rrf.MomentType = int32(value.Int64)
			}
		case rdrmomentsfollowing.FieldByUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field by_uid", values[i])
			} else if value.Valid {
				rrf.ByUID = int32(value.Int64)
			}
		case rdrmomentsfollowing.FieldForUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field for_uid", values[i])
			} else if value.Valid {
				rrf.ForUID = int32(value.Int64)
			}
		case rdrmomentsfollowing.FieldTxt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field txt", values[i])
			} else if value.Valid {
				rrf.Txt = value.String
			}
		case rdrmomentsfollowing.FieldImgs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field imgs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rrf.Imgs); err != nil {
					return fmt.Errorf("unmarshal field imgs: %w", err)
				}
			}
		case rdrmomentsfollowing.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rrf.Status = int32(value.Int64)
			}
		case rdrmomentsfollowing.FieldPublishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field publish_time", values[i])
			} else if value.Valid {
				rrf.PublishTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RdRMomentsFollowing.
// Note that you need to call RdRMomentsFollowing.Unwrap() before calling this method if this RdRMomentsFollowing
// was returned from a transaction, and the transaction was committed or rolled back.
func (rrf *RdRMomentsFollowing) Update() *RdRMomentsFollowingUpdateOne {
	return NewRdRMomentsFollowingClient(rrf.config).UpdateOne(rrf)
}

// Unwrap unwraps the RdRMomentsFollowing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rrf *RdRMomentsFollowing) Unwrap() *RdRMomentsFollowing {
	_tx, ok := rrf.config.driver.(*txDriver)
	if !ok {
		panic("ent: RdRMomentsFollowing is not a transactional entity")
	}
	rrf.config.driver = _tx.drv
	return rrf
}

// String implements the fmt.Stringer.
func (rrf *RdRMomentsFollowing) String() string {
	var builder strings.Builder
	builder.WriteString("RdRMomentsFollowing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rrf.ID))
	builder.WriteString("moment_id=")
	builder.WriteString(fmt.Sprintf("%v", rrf.MomentID))
	builder.WriteString(", ")
	builder.WriteString("moment_type=")
	builder.WriteString(fmt.Sprintf("%v", rrf.MomentType))
	builder.WriteString(", ")
	builder.WriteString("by_uid=")
	builder.WriteString(fmt.Sprintf("%v", rrf.ByUID))
	builder.WriteString(", ")
	builder.WriteString("for_uid=")
	builder.WriteString(fmt.Sprintf("%v", rrf.ForUID))
	builder.WriteString(", ")
	builder.WriteString("txt=")
	builder.WriteString(rrf.Txt)
	builder.WriteString(", ")
	builder.WriteString("imgs=")
	builder.WriteString(fmt.Sprintf("%v", rrf.Imgs))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rrf.Status))
	builder.WriteString(", ")
	builder.WriteString("publish_time=")
	builder.WriteString(rrf.PublishTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RdRMomentsFollowings is a parsable slice of RdRMomentsFollowing.
type RdRMomentsFollowings []*RdRMomentsFollowing

func (rrf RdRMomentsFollowings) config(cfg config) {
	for _i := range rrf {
		rrf[_i].config = cfg
	}
}
