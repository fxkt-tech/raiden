// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/biz"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdmessage"
)

// RdMessage is the model entity for the RdMessage schema.
type RdMessage struct {
	config `json:"-"`
	// ID of the ent.
	// 消息ID
	ID int32 `json:"id,omitempty"`
	// 发送者id
	SenderUID int32 `json:"sender_uid,omitempty"`
	// 接收者id
	RecverUID int32 `json:"recver_uid,omitempty"`
	// 聊天内容
	Content *biz.Content `json:"content,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RdMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rdmessage.FieldContent:
			values[i] = new([]byte)
		case rdmessage.FieldID, rdmessage.FieldSenderUID, rdmessage.FieldRecverUID:
			values[i] = new(sql.NullInt64)
		case rdmessage.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RdMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RdMessage fields.
func (rm *RdMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rdmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rm.ID = int32(value.Int64)
		case rdmessage.FieldSenderUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sender_uid", values[i])
			} else if value.Valid {
				rm.SenderUID = int32(value.Int64)
			}
		case rdmessage.FieldRecverUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recver_uid", values[i])
			} else if value.Valid {
				rm.RecverUID = int32(value.Int64)
			}
		case rdmessage.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rm.Content); err != nil {
					return fmt.Errorf("unmarshal field content: %w", err)
				}
			}
		case rdmessage.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				rm.CreateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RdMessage.
// Note that you need to call RdMessage.Unwrap() before calling this method if this RdMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (rm *RdMessage) Update() *RdMessageUpdateOne {
	return NewRdMessageClient(rm.config).UpdateOne(rm)
}

// Unwrap unwraps the RdMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rm *RdMessage) Unwrap() *RdMessage {
	_tx, ok := rm.config.driver.(*txDriver)
	if !ok {
		panic("ent: RdMessage is not a transactional entity")
	}
	rm.config.driver = _tx.drv
	return rm
}

// String implements the fmt.Stringer.
func (rm *RdMessage) String() string {
	var builder strings.Builder
	builder.WriteString("RdMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rm.ID))
	builder.WriteString("sender_uid=")
	builder.WriteString(fmt.Sprintf("%v", rm.SenderUID))
	builder.WriteString(", ")
	builder.WriteString("recver_uid=")
	builder.WriteString(fmt.Sprintf("%v", rm.RecverUID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", rm.Content))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(rm.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RdMessages is a parsable slice of RdMessage.
type RdMessages []*RdMessage

func (rm RdMessages) config(cfg config) {
	for _i := range rm {
		rm[_i].config = cfg
	}
}
