// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rduser"
)

// RdUser is the model entity for the RdUser schema.
type RdUser struct {
	config `json:"-"`
	// ID of the ent.
	// 用户ID
	ID int32 `json:"id,omitempty"`
	// 昵称
	Nick string `json:"nick,omitempty"`
	// 状态 1可用 2不可用
	Status int32 `json:"status,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RdUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rduser.FieldID, rduser.FieldStatus:
			values[i] = new(sql.NullInt64)
		case rduser.FieldNick:
			values[i] = new(sql.NullString)
		case rduser.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RdUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RdUser fields.
func (ru *RdUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rduser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ru.ID = int32(value.Int64)
		case rduser.FieldNick:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nick", values[i])
			} else if value.Valid {
				ru.Nick = value.String
			}
		case rduser.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ru.Status = int32(value.Int64)
			}
		case rduser.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ru.CreateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RdUser.
// Note that you need to call RdUser.Unwrap() before calling this method if this RdUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ru *RdUser) Update() *RdUserUpdateOne {
	return NewRdUserClient(ru.config).UpdateOne(ru)
}

// Unwrap unwraps the RdUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ru *RdUser) Unwrap() *RdUser {
	_tx, ok := ru.config.driver.(*txDriver)
	if !ok {
		panic("ent: RdUser is not a transactional entity")
	}
	ru.config.driver = _tx.drv
	return ru
}

// String implements the fmt.Stringer.
func (ru *RdUser) String() string {
	var builder strings.Builder
	builder.WriteString("RdUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ru.ID))
	builder.WriteString("nick=")
	builder.WriteString(ru.Nick)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ru.Status))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ru.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RdUsers is a parsable slice of RdUser.
type RdUsers []*RdUser

func (ru RdUsers) config(cfg config) {
	for _i := range ru {
		ru[_i].config = cfg
	}
}
