// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdruserfollowers"
)

// RdRUserFollowers is the model entity for the RdRUserFollowers schema.
type RdRUserFollowers struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// uid
	UID int32 `json:"uid,omitempty"`
	// 粉丝uid
	FollowersUID int32 `json:"followers_uid,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RdRUserFollowers) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rdruserfollowers.FieldID, rdruserfollowers.FieldUID, rdruserfollowers.FieldFollowersUID:
			values[i] = new(sql.NullInt64)
		case rdruserfollowers.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RdRUserFollowers", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RdRUserFollowers fields.
func (rrf *RdRUserFollowers) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rdruserfollowers.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rrf.ID = int64(value.Int64)
		case rdruserfollowers.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				rrf.UID = int32(value.Int64)
			}
		case rdruserfollowers.FieldFollowersUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field followers_uid", values[i])
			} else if value.Valid {
				rrf.FollowersUID = int32(value.Int64)
			}
		case rdruserfollowers.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				rrf.CreateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RdRUserFollowers.
// Note that you need to call RdRUserFollowers.Unwrap() before calling this method if this RdRUserFollowers
// was returned from a transaction, and the transaction was committed or rolled back.
func (rrf *RdRUserFollowers) Update() *RdRUserFollowersUpdateOne {
	return NewRdRUserFollowersClient(rrf.config).UpdateOne(rrf)
}

// Unwrap unwraps the RdRUserFollowers entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rrf *RdRUserFollowers) Unwrap() *RdRUserFollowers {
	_tx, ok := rrf.config.driver.(*txDriver)
	if !ok {
		panic("ent: RdRUserFollowers is not a transactional entity")
	}
	rrf.config.driver = _tx.drv
	return rrf
}

// String implements the fmt.Stringer.
func (rrf *RdRUserFollowers) String() string {
	var builder strings.Builder
	builder.WriteString("RdRUserFollowers(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rrf.ID))
	builder.WriteString("uid=")
	builder.WriteString(fmt.Sprintf("%v", rrf.UID))
	builder.WriteString(", ")
	builder.WriteString("followers_uid=")
	builder.WriteString(fmt.Sprintf("%v", rrf.FollowersUID))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(rrf.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RdRUserFollowersSlice is a parsable slice of RdRUserFollowers.
type RdRUserFollowersSlice []*RdRUserFollowers

func (rrf RdRUserFollowersSlice) config(cfg config) {
	for _i := range rrf {
		rrf[_i].config = cfg
	}
}
