// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/predicate"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rdrmomentsfollowing"
)

// RdRMomentsFollowingUpdate is the builder for updating RdRMomentsFollowing entities.
type RdRMomentsFollowingUpdate struct {
	config
	hooks    []Hook
	mutation *RdRMomentsFollowingMutation
}

// Where appends a list predicates to the RdRMomentsFollowingUpdate builder.
func (rrfu *RdRMomentsFollowingUpdate) Where(ps ...predicate.RdRMomentsFollowing) *RdRMomentsFollowingUpdate {
	rrfu.mutation.Where(ps...)
	return rrfu
}

// SetMomentID sets the "moment_id" field.
func (rrfu *RdRMomentsFollowingUpdate) SetMomentID(i int64) *RdRMomentsFollowingUpdate {
	rrfu.mutation.ResetMomentID()
	rrfu.mutation.SetMomentID(i)
	return rrfu
}

// SetNillableMomentID sets the "moment_id" field if the given value is not nil.
func (rrfu *RdRMomentsFollowingUpdate) SetNillableMomentID(i *int64) *RdRMomentsFollowingUpdate {
	if i != nil {
		rrfu.SetMomentID(*i)
	}
	return rrfu
}

// AddMomentID adds i to the "moment_id" field.
func (rrfu *RdRMomentsFollowingUpdate) AddMomentID(i int64) *RdRMomentsFollowingUpdate {
	rrfu.mutation.AddMomentID(i)
	return rrfu
}

// ClearMomentID clears the value of the "moment_id" field.
func (rrfu *RdRMomentsFollowingUpdate) ClearMomentID() *RdRMomentsFollowingUpdate {
	rrfu.mutation.ClearMomentID()
	return rrfu
}

// SetMomentType sets the "moment_type" field.
func (rrfu *RdRMomentsFollowingUpdate) SetMomentType(i int32) *RdRMomentsFollowingUpdate {
	rrfu.mutation.ResetMomentType()
	rrfu.mutation.SetMomentType(i)
	return rrfu
}

// SetNillableMomentType sets the "moment_type" field if the given value is not nil.
func (rrfu *RdRMomentsFollowingUpdate) SetNillableMomentType(i *int32) *RdRMomentsFollowingUpdate {
	if i != nil {
		rrfu.SetMomentType(*i)
	}
	return rrfu
}

// AddMomentType adds i to the "moment_type" field.
func (rrfu *RdRMomentsFollowingUpdate) AddMomentType(i int32) *RdRMomentsFollowingUpdate {
	rrfu.mutation.AddMomentType(i)
	return rrfu
}

// ClearMomentType clears the value of the "moment_type" field.
func (rrfu *RdRMomentsFollowingUpdate) ClearMomentType() *RdRMomentsFollowingUpdate {
	rrfu.mutation.ClearMomentType()
	return rrfu
}

// SetByUID sets the "by_uid" field.
func (rrfu *RdRMomentsFollowingUpdate) SetByUID(i int32) *RdRMomentsFollowingUpdate {
	rrfu.mutation.ResetByUID()
	rrfu.mutation.SetByUID(i)
	return rrfu
}

// SetNillableByUID sets the "by_uid" field if the given value is not nil.
func (rrfu *RdRMomentsFollowingUpdate) SetNillableByUID(i *int32) *RdRMomentsFollowingUpdate {
	if i != nil {
		rrfu.SetByUID(*i)
	}
	return rrfu
}

// AddByUID adds i to the "by_uid" field.
func (rrfu *RdRMomentsFollowingUpdate) AddByUID(i int32) *RdRMomentsFollowingUpdate {
	rrfu.mutation.AddByUID(i)
	return rrfu
}

// ClearByUID clears the value of the "by_uid" field.
func (rrfu *RdRMomentsFollowingUpdate) ClearByUID() *RdRMomentsFollowingUpdate {
	rrfu.mutation.ClearByUID()
	return rrfu
}

// SetForUID sets the "for_uid" field.
func (rrfu *RdRMomentsFollowingUpdate) SetForUID(i int32) *RdRMomentsFollowingUpdate {
	rrfu.mutation.ResetForUID()
	rrfu.mutation.SetForUID(i)
	return rrfu
}

// SetNillableForUID sets the "for_uid" field if the given value is not nil.
func (rrfu *RdRMomentsFollowingUpdate) SetNillableForUID(i *int32) *RdRMomentsFollowingUpdate {
	if i != nil {
		rrfu.SetForUID(*i)
	}
	return rrfu
}

// AddForUID adds i to the "for_uid" field.
func (rrfu *RdRMomentsFollowingUpdate) AddForUID(i int32) *RdRMomentsFollowingUpdate {
	rrfu.mutation.AddForUID(i)
	return rrfu
}

// ClearForUID clears the value of the "for_uid" field.
func (rrfu *RdRMomentsFollowingUpdate) ClearForUID() *RdRMomentsFollowingUpdate {
	rrfu.mutation.ClearForUID()
	return rrfu
}

// SetTxt sets the "txt" field.
func (rrfu *RdRMomentsFollowingUpdate) SetTxt(s string) *RdRMomentsFollowingUpdate {
	rrfu.mutation.SetTxt(s)
	return rrfu
}

// SetImgs sets the "imgs" field.
func (rrfu *RdRMomentsFollowingUpdate) SetImgs(s []string) *RdRMomentsFollowingUpdate {
	rrfu.mutation.SetImgs(s)
	return rrfu
}

// AppendImgs appends s to the "imgs" field.
func (rrfu *RdRMomentsFollowingUpdate) AppendImgs(s []string) *RdRMomentsFollowingUpdate {
	rrfu.mutation.AppendImgs(s)
	return rrfu
}

// SetStatus sets the "status" field.
func (rrfu *RdRMomentsFollowingUpdate) SetStatus(i int32) *RdRMomentsFollowingUpdate {
	rrfu.mutation.ResetStatus()
	rrfu.mutation.SetStatus(i)
	return rrfu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rrfu *RdRMomentsFollowingUpdate) SetNillableStatus(i *int32) *RdRMomentsFollowingUpdate {
	if i != nil {
		rrfu.SetStatus(*i)
	}
	return rrfu
}

// AddStatus adds i to the "status" field.
func (rrfu *RdRMomentsFollowingUpdate) AddStatus(i int32) *RdRMomentsFollowingUpdate {
	rrfu.mutation.AddStatus(i)
	return rrfu
}

// ClearStatus clears the value of the "status" field.
func (rrfu *RdRMomentsFollowingUpdate) ClearStatus() *RdRMomentsFollowingUpdate {
	rrfu.mutation.ClearStatus()
	return rrfu
}

// SetPublishTime sets the "publish_time" field.
func (rrfu *RdRMomentsFollowingUpdate) SetPublishTime(t time.Time) *RdRMomentsFollowingUpdate {
	rrfu.mutation.SetPublishTime(t)
	return rrfu
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (rrfu *RdRMomentsFollowingUpdate) SetNillablePublishTime(t *time.Time) *RdRMomentsFollowingUpdate {
	if t != nil {
		rrfu.SetPublishTime(*t)
	}
	return rrfu
}

// Mutation returns the RdRMomentsFollowingMutation object of the builder.
func (rrfu *RdRMomentsFollowingUpdate) Mutation() *RdRMomentsFollowingMutation {
	return rrfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rrfu *RdRMomentsFollowingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RdRMomentsFollowingMutation](ctx, rrfu.sqlSave, rrfu.mutation, rrfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rrfu *RdRMomentsFollowingUpdate) SaveX(ctx context.Context) int {
	affected, err := rrfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rrfu *RdRMomentsFollowingUpdate) Exec(ctx context.Context) error {
	_, err := rrfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrfu *RdRMomentsFollowingUpdate) ExecX(ctx context.Context) {
	if err := rrfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rrfu *RdRMomentsFollowingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rdrmomentsfollowing.Table,
			Columns: rdrmomentsfollowing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: rdrmomentsfollowing.FieldID,
			},
		},
	}
	if ps := rrfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rrfu.mutation.MomentID(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldMomentID, field.TypeInt64, value)
	}
	if value, ok := rrfu.mutation.AddedMomentID(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldMomentID, field.TypeInt64, value)
	}
	if rrfu.mutation.MomentIDCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldMomentID, field.TypeInt64)
	}
	if value, ok := rrfu.mutation.MomentType(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldMomentType, field.TypeInt32, value)
	}
	if value, ok := rrfu.mutation.AddedMomentType(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldMomentType, field.TypeInt32, value)
	}
	if rrfu.mutation.MomentTypeCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldMomentType, field.TypeInt32)
	}
	if value, ok := rrfu.mutation.ByUID(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldByUID, field.TypeInt32, value)
	}
	if value, ok := rrfu.mutation.AddedByUID(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldByUID, field.TypeInt32, value)
	}
	if rrfu.mutation.ByUIDCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldByUID, field.TypeInt32)
	}
	if value, ok := rrfu.mutation.ForUID(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldForUID, field.TypeInt32, value)
	}
	if value, ok := rrfu.mutation.AddedForUID(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldForUID, field.TypeInt32, value)
	}
	if rrfu.mutation.ForUIDCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldForUID, field.TypeInt32)
	}
	if value, ok := rrfu.mutation.Txt(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldTxt, field.TypeString, value)
	}
	if value, ok := rrfu.mutation.Imgs(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldImgs, field.TypeJSON, value)
	}
	if value, ok := rrfu.mutation.AppendedImgs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rdrmomentsfollowing.FieldImgs, value)
		})
	}
	if value, ok := rrfu.mutation.Status(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := rrfu.mutation.AddedStatus(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldStatus, field.TypeInt32, value)
	}
	if rrfu.mutation.StatusCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldStatus, field.TypeInt32)
	}
	if value, ok := rrfu.mutation.PublishTime(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldPublishTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rrfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rdrmomentsfollowing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rrfu.mutation.done = true
	return n, nil
}

// RdRMomentsFollowingUpdateOne is the builder for updating a single RdRMomentsFollowing entity.
type RdRMomentsFollowingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RdRMomentsFollowingMutation
}

// SetMomentID sets the "moment_id" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetMomentID(i int64) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ResetMomentID()
	rrfuo.mutation.SetMomentID(i)
	return rrfuo
}

// SetNillableMomentID sets the "moment_id" field if the given value is not nil.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetNillableMomentID(i *int64) *RdRMomentsFollowingUpdateOne {
	if i != nil {
		rrfuo.SetMomentID(*i)
	}
	return rrfuo
}

// AddMomentID adds i to the "moment_id" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) AddMomentID(i int64) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.AddMomentID(i)
	return rrfuo
}

// ClearMomentID clears the value of the "moment_id" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) ClearMomentID() *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ClearMomentID()
	return rrfuo
}

// SetMomentType sets the "moment_type" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetMomentType(i int32) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ResetMomentType()
	rrfuo.mutation.SetMomentType(i)
	return rrfuo
}

// SetNillableMomentType sets the "moment_type" field if the given value is not nil.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetNillableMomentType(i *int32) *RdRMomentsFollowingUpdateOne {
	if i != nil {
		rrfuo.SetMomentType(*i)
	}
	return rrfuo
}

// AddMomentType adds i to the "moment_type" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) AddMomentType(i int32) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.AddMomentType(i)
	return rrfuo
}

// ClearMomentType clears the value of the "moment_type" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) ClearMomentType() *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ClearMomentType()
	return rrfuo
}

// SetByUID sets the "by_uid" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetByUID(i int32) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ResetByUID()
	rrfuo.mutation.SetByUID(i)
	return rrfuo
}

// SetNillableByUID sets the "by_uid" field if the given value is not nil.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetNillableByUID(i *int32) *RdRMomentsFollowingUpdateOne {
	if i != nil {
		rrfuo.SetByUID(*i)
	}
	return rrfuo
}

// AddByUID adds i to the "by_uid" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) AddByUID(i int32) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.AddByUID(i)
	return rrfuo
}

// ClearByUID clears the value of the "by_uid" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) ClearByUID() *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ClearByUID()
	return rrfuo
}

// SetForUID sets the "for_uid" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetForUID(i int32) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ResetForUID()
	rrfuo.mutation.SetForUID(i)
	return rrfuo
}

// SetNillableForUID sets the "for_uid" field if the given value is not nil.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetNillableForUID(i *int32) *RdRMomentsFollowingUpdateOne {
	if i != nil {
		rrfuo.SetForUID(*i)
	}
	return rrfuo
}

// AddForUID adds i to the "for_uid" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) AddForUID(i int32) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.AddForUID(i)
	return rrfuo
}

// ClearForUID clears the value of the "for_uid" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) ClearForUID() *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ClearForUID()
	return rrfuo
}

// SetTxt sets the "txt" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetTxt(s string) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.SetTxt(s)
	return rrfuo
}

// SetImgs sets the "imgs" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetImgs(s []string) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.SetImgs(s)
	return rrfuo
}

// AppendImgs appends s to the "imgs" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) AppendImgs(s []string) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.AppendImgs(s)
	return rrfuo
}

// SetStatus sets the "status" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetStatus(i int32) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ResetStatus()
	rrfuo.mutation.SetStatus(i)
	return rrfuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetNillableStatus(i *int32) *RdRMomentsFollowingUpdateOne {
	if i != nil {
		rrfuo.SetStatus(*i)
	}
	return rrfuo
}

// AddStatus adds i to the "status" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) AddStatus(i int32) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.AddStatus(i)
	return rrfuo
}

// ClearStatus clears the value of the "status" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) ClearStatus() *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.ClearStatus()
	return rrfuo
}

// SetPublishTime sets the "publish_time" field.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetPublishTime(t time.Time) *RdRMomentsFollowingUpdateOne {
	rrfuo.mutation.SetPublishTime(t)
	return rrfuo
}

// SetNillablePublishTime sets the "publish_time" field if the given value is not nil.
func (rrfuo *RdRMomentsFollowingUpdateOne) SetNillablePublishTime(t *time.Time) *RdRMomentsFollowingUpdateOne {
	if t != nil {
		rrfuo.SetPublishTime(*t)
	}
	return rrfuo
}

// Mutation returns the RdRMomentsFollowingMutation object of the builder.
func (rrfuo *RdRMomentsFollowingUpdateOne) Mutation() *RdRMomentsFollowingMutation {
	return rrfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rrfuo *RdRMomentsFollowingUpdateOne) Select(field string, fields ...string) *RdRMomentsFollowingUpdateOne {
	rrfuo.fields = append([]string{field}, fields...)
	return rrfuo
}

// Save executes the query and returns the updated RdRMomentsFollowing entity.
func (rrfuo *RdRMomentsFollowingUpdateOne) Save(ctx context.Context) (*RdRMomentsFollowing, error) {
	return withHooks[*RdRMomentsFollowing, RdRMomentsFollowingMutation](ctx, rrfuo.sqlSave, rrfuo.mutation, rrfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rrfuo *RdRMomentsFollowingUpdateOne) SaveX(ctx context.Context) *RdRMomentsFollowing {
	node, err := rrfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rrfuo *RdRMomentsFollowingUpdateOne) Exec(ctx context.Context) error {
	_, err := rrfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrfuo *RdRMomentsFollowingUpdateOne) ExecX(ctx context.Context) {
	if err := rrfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rrfuo *RdRMomentsFollowingUpdateOne) sqlSave(ctx context.Context) (_node *RdRMomentsFollowing, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rdrmomentsfollowing.Table,
			Columns: rdrmomentsfollowing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: rdrmomentsfollowing.FieldID,
			},
		},
	}
	id, ok := rrfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RdRMomentsFollowing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rrfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rdrmomentsfollowing.FieldID)
		for _, f := range fields {
			if !rdrmomentsfollowing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rdrmomentsfollowing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rrfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rrfuo.mutation.MomentID(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldMomentID, field.TypeInt64, value)
	}
	if value, ok := rrfuo.mutation.AddedMomentID(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldMomentID, field.TypeInt64, value)
	}
	if rrfuo.mutation.MomentIDCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldMomentID, field.TypeInt64)
	}
	if value, ok := rrfuo.mutation.MomentType(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldMomentType, field.TypeInt32, value)
	}
	if value, ok := rrfuo.mutation.AddedMomentType(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldMomentType, field.TypeInt32, value)
	}
	if rrfuo.mutation.MomentTypeCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldMomentType, field.TypeInt32)
	}
	if value, ok := rrfuo.mutation.ByUID(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldByUID, field.TypeInt32, value)
	}
	if value, ok := rrfuo.mutation.AddedByUID(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldByUID, field.TypeInt32, value)
	}
	if rrfuo.mutation.ByUIDCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldByUID, field.TypeInt32)
	}
	if value, ok := rrfuo.mutation.ForUID(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldForUID, field.TypeInt32, value)
	}
	if value, ok := rrfuo.mutation.AddedForUID(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldForUID, field.TypeInt32, value)
	}
	if rrfuo.mutation.ForUIDCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldForUID, field.TypeInt32)
	}
	if value, ok := rrfuo.mutation.Txt(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldTxt, field.TypeString, value)
	}
	if value, ok := rrfuo.mutation.Imgs(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldImgs, field.TypeJSON, value)
	}
	if value, ok := rrfuo.mutation.AppendedImgs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rdrmomentsfollowing.FieldImgs, value)
		})
	}
	if value, ok := rrfuo.mutation.Status(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := rrfuo.mutation.AddedStatus(); ok {
		_spec.AddField(rdrmomentsfollowing.FieldStatus, field.TypeInt32, value)
	}
	if rrfuo.mutation.StatusCleared() {
		_spec.ClearField(rdrmomentsfollowing.FieldStatus, field.TypeInt32)
	}
	if value, ok := rrfuo.mutation.PublishTime(); ok {
		_spec.SetField(rdrmomentsfollowing.FieldPublishTime, field.TypeTime, value)
	}
	_node = &RdRMomentsFollowing{config: rrfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rrfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rdrmomentsfollowing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rrfuo.mutation.done = true
	return _node, nil
}
