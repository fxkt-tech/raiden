// Code generated by ent, DO NOT EDIT.

package rdmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldLTE(FieldID, id))
}

// SenderUID applies equality check predicate on the "sender_uid" field. It's identical to SenderUIDEQ.
func SenderUID(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldEQ(FieldSenderUID, v))
}

// RecverUID applies equality check predicate on the "recver_uid" field. It's identical to RecverUIDEQ.
func RecverUID(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldEQ(FieldRecverUID, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldEQ(FieldCreateTime, v))
}

// SenderUIDEQ applies the EQ predicate on the "sender_uid" field.
func SenderUIDEQ(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldEQ(FieldSenderUID, v))
}

// SenderUIDNEQ applies the NEQ predicate on the "sender_uid" field.
func SenderUIDNEQ(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNEQ(FieldSenderUID, v))
}

// SenderUIDIn applies the In predicate on the "sender_uid" field.
func SenderUIDIn(vs ...int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldIn(FieldSenderUID, vs...))
}

// SenderUIDNotIn applies the NotIn predicate on the "sender_uid" field.
func SenderUIDNotIn(vs ...int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNotIn(FieldSenderUID, vs...))
}

// SenderUIDGT applies the GT predicate on the "sender_uid" field.
func SenderUIDGT(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldGT(FieldSenderUID, v))
}

// SenderUIDGTE applies the GTE predicate on the "sender_uid" field.
func SenderUIDGTE(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldGTE(FieldSenderUID, v))
}

// SenderUIDLT applies the LT predicate on the "sender_uid" field.
func SenderUIDLT(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldLT(FieldSenderUID, v))
}

// SenderUIDLTE applies the LTE predicate on the "sender_uid" field.
func SenderUIDLTE(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldLTE(FieldSenderUID, v))
}

// SenderUIDIsNil applies the IsNil predicate on the "sender_uid" field.
func SenderUIDIsNil() predicate.RdMessage {
	return predicate.RdMessage(sql.FieldIsNull(FieldSenderUID))
}

// SenderUIDNotNil applies the NotNil predicate on the "sender_uid" field.
func SenderUIDNotNil() predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNotNull(FieldSenderUID))
}

// RecverUIDEQ applies the EQ predicate on the "recver_uid" field.
func RecverUIDEQ(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldEQ(FieldRecverUID, v))
}

// RecverUIDNEQ applies the NEQ predicate on the "recver_uid" field.
func RecverUIDNEQ(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNEQ(FieldRecverUID, v))
}

// RecverUIDIn applies the In predicate on the "recver_uid" field.
func RecverUIDIn(vs ...int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldIn(FieldRecverUID, vs...))
}

// RecverUIDNotIn applies the NotIn predicate on the "recver_uid" field.
func RecverUIDNotIn(vs ...int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNotIn(FieldRecverUID, vs...))
}

// RecverUIDGT applies the GT predicate on the "recver_uid" field.
func RecverUIDGT(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldGT(FieldRecverUID, v))
}

// RecverUIDGTE applies the GTE predicate on the "recver_uid" field.
func RecverUIDGTE(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldGTE(FieldRecverUID, v))
}

// RecverUIDLT applies the LT predicate on the "recver_uid" field.
func RecverUIDLT(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldLT(FieldRecverUID, v))
}

// RecverUIDLTE applies the LTE predicate on the "recver_uid" field.
func RecverUIDLTE(v int32) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldLTE(FieldRecverUID, v))
}

// RecverUIDIsNil applies the IsNil predicate on the "recver_uid" field.
func RecverUIDIsNil() predicate.RdMessage {
	return predicate.RdMessage(sql.FieldIsNull(FieldRecverUID))
}

// RecverUIDNotNil applies the NotNil predicate on the "recver_uid" field.
func RecverUIDNotNil() predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNotNull(FieldRecverUID))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.RdMessage {
	return predicate.RdMessage(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RdMessage) predicate.RdMessage {
	return predicate.RdMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RdMessage) predicate.RdMessage {
	return predicate.RdMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RdMessage) predicate.RdMessage {
	return predicate.RdMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}
