// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/predicate"
	"github.com/fxkt-tech/raiden/app/mainsite/service/internal/data/ent/rduser"
)

// RdUserUpdate is the builder for updating RdUser entities.
type RdUserUpdate struct {
	config
	hooks    []Hook
	mutation *RdUserMutation
}

// Where appends a list predicates to the RdUserUpdate builder.
func (ruu *RdUserUpdate) Where(ps ...predicate.RdUser) *RdUserUpdate {
	ruu.mutation.Where(ps...)
	return ruu
}

// SetNick sets the "nick" field.
func (ruu *RdUserUpdate) SetNick(s string) *RdUserUpdate {
	ruu.mutation.SetNick(s)
	return ruu
}

// SetStatus sets the "status" field.
func (ruu *RdUserUpdate) SetStatus(i int32) *RdUserUpdate {
	ruu.mutation.ResetStatus()
	ruu.mutation.SetStatus(i)
	return ruu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruu *RdUserUpdate) SetNillableStatus(i *int32) *RdUserUpdate {
	if i != nil {
		ruu.SetStatus(*i)
	}
	return ruu
}

// AddStatus adds i to the "status" field.
func (ruu *RdUserUpdate) AddStatus(i int32) *RdUserUpdate {
	ruu.mutation.AddStatus(i)
	return ruu
}

// SetCreateTime sets the "create_time" field.
func (ruu *RdUserUpdate) SetCreateTime(t time.Time) *RdUserUpdate {
	ruu.mutation.SetCreateTime(t)
	return ruu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ruu *RdUserUpdate) SetNillableCreateTime(t *time.Time) *RdUserUpdate {
	if t != nil {
		ruu.SetCreateTime(*t)
	}
	return ruu
}

// Mutation returns the RdUserMutation object of the builder.
func (ruu *RdUserUpdate) Mutation() *RdUserMutation {
	return ruu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ruu *RdUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RdUserMutation](ctx, ruu.sqlSave, ruu.mutation, ruu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruu *RdUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ruu *RdUserUpdate) Exec(ctx context.Context) error {
	_, err := ruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruu *RdUserUpdate) ExecX(ctx context.Context) {
	if err := ruu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruu *RdUserUpdate) check() error {
	if v, ok := ruu.mutation.Nick(); ok {
		if err := rduser.NickValidator(v); err != nil {
			return &ValidationError{Name: "nick", err: fmt.Errorf(`ent: validator failed for field "RdUser.nick": %w`, err)}
		}
	}
	return nil
}

func (ruu *RdUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ruu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rduser.Table,
			Columns: rduser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: rduser.FieldID,
			},
		},
	}
	if ps := ruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruu.mutation.Nick(); ok {
		_spec.SetField(rduser.FieldNick, field.TypeString, value)
	}
	if value, ok := ruu.mutation.Status(); ok {
		_spec.SetField(rduser.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := ruu.mutation.AddedStatus(); ok {
		_spec.AddField(rduser.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := ruu.mutation.CreateTime(); ok {
		_spec.SetField(rduser.FieldCreateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ruu.mutation.done = true
	return n, nil
}

// RdUserUpdateOne is the builder for updating a single RdUser entity.
type RdUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RdUserMutation
}

// SetNick sets the "nick" field.
func (ruuo *RdUserUpdateOne) SetNick(s string) *RdUserUpdateOne {
	ruuo.mutation.SetNick(s)
	return ruuo
}

// SetStatus sets the "status" field.
func (ruuo *RdUserUpdateOne) SetStatus(i int32) *RdUserUpdateOne {
	ruuo.mutation.ResetStatus()
	ruuo.mutation.SetStatus(i)
	return ruuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruuo *RdUserUpdateOne) SetNillableStatus(i *int32) *RdUserUpdateOne {
	if i != nil {
		ruuo.SetStatus(*i)
	}
	return ruuo
}

// AddStatus adds i to the "status" field.
func (ruuo *RdUserUpdateOne) AddStatus(i int32) *RdUserUpdateOne {
	ruuo.mutation.AddStatus(i)
	return ruuo
}

// SetCreateTime sets the "create_time" field.
func (ruuo *RdUserUpdateOne) SetCreateTime(t time.Time) *RdUserUpdateOne {
	ruuo.mutation.SetCreateTime(t)
	return ruuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ruuo *RdUserUpdateOne) SetNillableCreateTime(t *time.Time) *RdUserUpdateOne {
	if t != nil {
		ruuo.SetCreateTime(*t)
	}
	return ruuo
}

// Mutation returns the RdUserMutation object of the builder.
func (ruuo *RdUserUpdateOne) Mutation() *RdUserMutation {
	return ruuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruuo *RdUserUpdateOne) Select(field string, fields ...string) *RdUserUpdateOne {
	ruuo.fields = append([]string{field}, fields...)
	return ruuo
}

// Save executes the query and returns the updated RdUser entity.
func (ruuo *RdUserUpdateOne) Save(ctx context.Context) (*RdUser, error) {
	return withHooks[*RdUser, RdUserMutation](ctx, ruuo.sqlSave, ruuo.mutation, ruuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruuo *RdUserUpdateOne) SaveX(ctx context.Context) *RdUser {
	node, err := ruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruuo *RdUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruuo *RdUserUpdateOne) ExecX(ctx context.Context) {
	if err := ruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruuo *RdUserUpdateOne) check() error {
	if v, ok := ruuo.mutation.Nick(); ok {
		if err := rduser.NickValidator(v); err != nil {
			return &ValidationError{Name: "nick", err: fmt.Errorf(`ent: validator failed for field "RdUser.nick": %w`, err)}
		}
	}
	return nil
}

func (ruuo *RdUserUpdateOne) sqlSave(ctx context.Context) (_node *RdUser, err error) {
	if err := ruuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rduser.Table,
			Columns: rduser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: rduser.FieldID,
			},
		},
	}
	id, ok := ruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RdUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rduser.FieldID)
		for _, f := range fields {
			if !rduser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruuo.mutation.Nick(); ok {
		_spec.SetField(rduser.FieldNick, field.TypeString, value)
	}
	if value, ok := ruuo.mutation.Status(); ok {
		_spec.SetField(rduser.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := ruuo.mutation.AddedStatus(); ok {
		_spec.AddField(rduser.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := ruuo.mutation.CreateTime(); ok {
		_spec.SetField(rduser.FieldCreateTime, field.TypeTime, value)
	}
	_node = &RdUser{config: ruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruuo.mutation.done = true
	return _node, nil
}
